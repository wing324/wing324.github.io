<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Wing&#39;s Tech Space</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://wing324.github.io/"/>
  <updated>2020-04-19T01:06:20.560Z</updated>
  <id>https://wing324.github.io/</id>
  
  <author>
    <name>Wing</name>
    <email>wing324@126.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Difference Between the Overloading and Overriding of Methods</title>
    <link href="https://wing324.github.io/2020/04/18/Difference-Between-the-Overloading-and-Overriding-of-Methods/"/>
    <id>https://wing324.github.io/2020/04/18/Difference-Between-the-Overloading-and-Overriding-of-Methods/</id>
    <published>2020-04-19T00:10:00.000Z</published>
    <updated>2020-04-19T01:06:20.560Z</updated>
    
    <content type="html"><![CDATA[<p>Overloading and Overriding, they are totally different staff. I am always confusing about it.</p>
<p>It is study note from <a href="https://www.educative.io/courses/learn-object-oriented-programming-in-java" target="_blank" rel="external">Educative.io</a></p>
<a id="more"></a>
<p><img src="/img/difference-between-overrinding-and-overloading.png" alt="difference-between-overrinding-and-overloading"></p>
<h3 id="Overloading">Overloading</h3><ul>
<li><p><strong>Illustration</strong></p>
<p><img src="/img/overloading-method.png" alt="overloading-method"></p>
</li>
<li><p><strong>Example</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="comment">//Calculator Class</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Calculator</span> </span>&#123;</div><div class="line"></div><div class="line">  <span class="comment">// Add funtions with two parameters</span></div><div class="line">  <span class="function"><span class="keyword">int</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> num1, <span class="keyword">int</span> num2)</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> num1 + num2;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="comment">// Add funtions with three parameters</span></div><div class="line">  <span class="function"><span class="keyword">int</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> num1, <span class="keyword">int</span> num2, <span class="keyword">int</span> num3 )</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> num1 + num2 + num3;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="comment">// Add funtions with four parameters</span></div><div class="line">  <span class="function"><span class="keyword">int</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> num1, <span class="keyword">int</span> num2, <span class="keyword">int</span> num3, <span class="keyword">int</span> num4 )</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> num1 + num2 + num3 + num4;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> </span>&#123;</div><div class="line">    Calculator cal = <span class="keyword">new</span> Calculator();</div><div class="line"></div><div class="line">    System.out.println(<span class="string">"10 + 20 =  "</span> + cal.add(<span class="number">10</span>, <span class="number">20</span>));</div><div class="line">    System.out.println(<span class="string">"10 + 20 + 30 =  "</span> + cal.add(<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>));</div><div class="line">    System.out.println(<span class="string">"10 + 20 + 30 + 40 =  "</span> + cal.add(<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>, <span class="number">40</span>));</div><div class="line">  &#125;</div><div class="line">  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="Overriding">Overriding</h3><ul>
<li><p><strong>Illustration</strong></p>
<p><img src="/img/overriding-method.png" alt="overriding-method"></p>
</li>
<li><p><strong>Example</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="comment">// base class</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Shape</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">getArea</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// subclass 1</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Rectangle</span> <span class="keyword">extends</span> <span class="title">Shape</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">double</span> width;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">double</span> heigh;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Rectangle</span><span class="params">(<span class="keyword">double</span> width, <span class="keyword">double</span> heigh)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.width = width;</div><div class="line">        <span class="keyword">this</span>.heigh = heigh;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">getArea</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> width * heigh;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">// subclass 2</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Circle</span> <span class="keyword">extends</span> <span class="title">Shape</span> </span>&#123;</div><div class="line">  </div><div class="line">  <span class="comment">// Private data member</span></div><div class="line">  <span class="keyword">private</span> <span class="keyword">double</span> radius;</div><div class="line"></div><div class="line">  <span class="comment">// Constructor</span></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="title">Circle</span><span class="params">(<span class="keyword">double</span> radius)</span> </span>&#123;</div><div class="line">    <span class="keyword">this</span>.radius = radius; </div><div class="line">  &#125;</div><div class="line">  </div><div class="line">  <span class="comment">// Public method to calculate Area</span></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">getArea</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="number">3.14</span> * radius * radius; </div><div class="line">  &#125;</div><div class="line">  </div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        Shape rect = <span class="keyword">new</span> Rectangle(<span class="number">3</span>, <span class="number">4</span>);</div><div class="line">        Shape circle = <span class="keyword">new</span> Circle(<span class="number">4</span>);</div><div class="line"></div><div class="line">        System.out.println(rect.getArea()); <span class="comment">// 12.0</span></div><div class="line">        System.out.println(circle.getArea()); <span class="comment">// 50.24</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Overloading and Overriding, they are totally different staff. I am always confusing about it.&lt;/p&gt;
&lt;p&gt;It is study note from &lt;a href=&quot;https://www.educative.io/courses/learn-object-oriented-programming-in-java&quot;&gt;Educative.io&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="OOP" scheme="https://wing324.github.io/categories/OOP/"/>
    
    
      <category term="oop" scheme="https://wing324.github.io/tags/oop/"/>
    
      <category term="object-orientated programming" scheme="https://wing324.github.io/tags/object-orientated-programming/"/>
    
      <category term="overloading" scheme="https://wing324.github.io/tags/overloading/"/>
    
      <category term="overriding" scheme="https://wing324.github.io/tags/overriding/"/>
    
  </entry>
  
  <entry>
    <title>Four Principles In Object-orientated Programming</title>
    <link href="https://wing324.github.io/2020/04/18/Four-Principles-In-Object-orientated-Programming/"/>
    <id>https://wing324.github.io/2020/04/18/Four-Principles-In-Object-orientated-Programming/</id>
    <published>2020-04-18T18:28:13.000Z</published>
    <updated>2020-04-19T01:02:50.380Z</updated>
    
    <content type="html"><![CDATA[<p>The four principles of OOP are: Encapsulation, Inheritance, Polymorphism, and Abstract. Let’s introduce each principle in the following paragraphs. </p>
<p>It is study note from <a href="https://www.educative.io/courses/learn-object-oriented-programming-in-java" target="_blank" rel="external">Educative.io</a></p>
<a id="more"></a>
<ul>
<li><h2 id="Encapsulation">Encapsulation</h2><ul>
<li><h4 id="Definition">Definition</h4><p>It refers to binding the data and the methods to control that data together in a single class. It hides the data and the method of the object from the outside.</p>
</li>
<li><h4 id="Illustration">Illustration</h4><p>All variables in a class should be <code>private</code>. And we define <code>public</code> methods that are called as <em>getter</em> and <em>setter</em> to access or modify the variables.</p>
<p><img src="/img/encapsulation-principle.png" alt="encapsulation-principle"></p>
</li>
<li><h4 id="Advantages">Advantages</h4><ul>
<li>It is easy to manage the class.</li>
<li>We can specify which data member we want to hidden or accessible.</li>
<li>We can decide which variables have read/write privileges(Increase flexibility).</li>
<li>It is security because other classes can not modify data without permission.</li>
</ul>
</li>
<li><h4 id="Example">Example</h4><p>A <code>user</code> class is modeled as:</p>
<p>Having  <code>userName</code> field;</p>
<p>Having <code>password</code> field;</p>
<p>A method named <code>login()</code>  to grant access.</p>
<ul>
<li><p><strong>Java OOP</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</div><div class="line">    <span class="comment">// private variables/data</span></div><div class="line">    <span class="keyword">private</span> String userName;</div><div class="line">    <span class="keyword">private</span> String password;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">User</span><span class="params">(String userName, String password)</span></span>&#123;</div><div class="line">        <span class="keyword">this</span>.userName = userName;</div><div class="line">        <span class="keyword">this</span>.password = password;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">login</span><span class="params">(String userName, String password)</span></span>&#123;</div><div class="line">        <span class="comment">// check if the userName and password match</span></div><div class="line">        <span class="keyword">if</span>(<span class="keyword">this</span>.userName.toLowerCase().equals(userName.toLowerCase()) &amp;&amp; <span class="keyword">this</span>.password.equals(password))&#123;</div><div class="line">            System.out.println(<span class="string">"You are granted access!"</span>);</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            System.out.println(<span class="string">"Invalid userName or Password"</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</div><div class="line">        User user = <span class="keyword">new</span> User(<span class="string">"wing"</span>, <span class="string">"123"</span>);</div><div class="line">        user.login(<span class="string">"wing"</span>, <span class="string">"124"</span>); <span class="comment">// Invalid userName or Password</span></div><div class="line">        user.login(<span class="string">"wing"</span>, <span class="string">"123"</span>); <span class="comment">// You are granted access!</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p><strong>Python OOP</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><div class="line"> </div></pre></td></tr></table></figure>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<ul>
<li><h2 id="Inheritance">Inheritance</h2><ul>
<li><h4 id="Definition-1">Definition</h4><p>It provides a way to create a new class(subClass) from a existing class(superClass). And the new class <strong>inherits</strong> all the non-private fields and methods of the existing class.</p>
<p>It uses <strong>extends</strong> and <strong>overriding</strong> keyword.</p>
</li>
<li><h4 id="Illustration-1">Illustration</h4><p>This <strong>is A</strong> relationship.</p>
<p><img src="/img/inheritance-principle.png" alt="inheritance-principle"></p>
</li>
<li><h4 id="Advantages-1">Advantages</h4><ul>
<li>Inheritance makes the code reusable(Re-usability).</li>
<li>Avoiding duplicate of  code.</li>
<li>SubClass can extend SuperClass logic(Extensibility).</li>
<li>SuperClass can keep some data private, it also named data hiding.</li>
</ul>
</li>
<li><h4 id="Example-1">Example</h4><ul>
<li><p><strong>Java OOP</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="comment">// Super Class</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Vehicle</span> </span>&#123;</div><div class="line">    <span class="comment">// private fields</span></div><div class="line">    <span class="keyword">private</span> String make;</div><div class="line">    <span class="keyword">private</span> String color;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> year;</div><div class="line">    <span class="keyword">private</span> String model;</div><div class="line"></div><div class="line">    <span class="comment">// Constructor</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Vehicle</span><span class="params">(String make, String color, <span class="keyword">int</span> year, String model)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.make = make;</div><div class="line">        <span class="keyword">this</span>.color = color;</div><div class="line">        <span class="keyword">this</span>.year = year;</div><div class="line">        <span class="keyword">this</span>.model = model;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// method</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">printDetails</span><span class="params">()</span> </span>&#123;</div><div class="line">        System.out.println(<span class="keyword">this</span>.make +<span class="string">"  "</span>+<span class="keyword">this</span>.color +<span class="string">"  "</span>+ <span class="keyword">this</span>.year+<span class="string">"  "</span>+<span class="keyword">this</span>.model);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">// Sub Class</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Car</span> <span class="keyword">extends</span> <span class="title">Vehicle</span> </span>&#123;</div><div class="line">    <span class="comment">// private fields</span></div><div class="line">    <span class="keyword">private</span> String bodyStyle;</div><div class="line"></div><div class="line">    <span class="comment">// Constructor</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Car</span><span class="params">(String make, String color, <span class="keyword">int</span> year, String model, String bodyStyle)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>(make, color, year, model);</div><div class="line">        <span class="keyword">this</span>.bodyStyle = bodyStyle;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">carDetails</span><span class="params">()</span> </span>&#123;</div><div class="line">        printDetails();</div><div class="line">        System.out.println(bodyStyle);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        Car car = <span class="keyword">new</span> Car(<span class="string">"Weilai"</span>, <span class="string">"Blue"</span>, <span class="number">2020</span>, <span class="string">"SUV"</span>, <span class="string">"Cool Style"</span>);</div><div class="line">        <span class="comment">// Weilai  Blue  2020  SUV</span></div><div class="line">        <span class="comment">// Cool Style</span></div><div class="line">        car.carDetails();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p><strong>Python OOP</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><div class="line"> </div></pre></td></tr></table></figure>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<ul>
<li><h2 id="Polymorphism">Polymorphism</h2><ul>
<li><h4 id="Definition-2">Definition</h4><p>A same object shows different forms and behaviors.</p>
<p>It can be presented by <code>extends</code> keyword.</p>
</li>
<li><h4 id="Illustration-2">Illustration</h4><p><img src="/img/polymorphism-principle.png" alt="polymorphism-principle"></p>
</li>
<li><h4 id="Types">Types</h4><p><strong>Dynamic Polymorphism</strong> VS <strong>Static Polymorphism</strong> is also known as <code>overloading</code> vs <code>overriding</code>.</p>
<ul>
<li><p><strong>Dynamic Polymorphism</strong></p>
<p>It allows method can be defined with the <strong>same</strong> name, return type, and parameters in the parent class and child class.</p>
<p>It is also known as runtime polymorphism by using <code>overriding</code>.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="comment">// Java Example</span></div><div class="line"><span class="comment">// See Java OOP Example</span></div></pre></td></tr></table></figure>
</li>
<li><p><strong>Static Polymorphism</strong></p>
<p>It is also known as compile time polymorphism by <code>overloading</code> method.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Calculator</span> </span>&#123;</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">int</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> num1, <span class="keyword">int</span> num2)</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> num1 + num2;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">int</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> num1, <span class="keyword">int</span> num2, <span class="keyword">int</span> num3)</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> num1 + num2 + num3;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> </span>&#123;</div><div class="line">  </div><div class="line">    Calculator obj = <span class="keyword">new</span> Calculator();</div><div class="line">    System.out.println(<span class="string">"10 + 20 = "</span> + obj.add(<span class="number">10</span>, <span class="number">20</span>));</div><div class="line">    System.out.println(<span class="string">"10 + 20 + 30 = "</span> + obj.add(<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>));</div><div class="line">  &#125;</div><div class="line">  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><h4 id="Advantages-2">Advantages</h4><ul>
<li>Method overloading allows methods that perform similar or closely related functions to be accessed through a common name.</li>
<li>Method overloading can be implemented on constructors allowing different ways to initialize objects of a class</li>
<li>Method overriding allows that the child classes can give their own specific implementations to inherited methods without modifying the parent class methods.</li>
<li>Method overriding allows that a child class can use the implementation in the parent class or make its own implementation</li>
</ul>
</li>
<li><h4 id="Example-2">Example</h4><ul>
<li><p><strong>Java OOP</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="comment">// base class</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Shape</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">getArea</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// subclass 1</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Rectangle</span> <span class="keyword">extends</span> <span class="title">Shape</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">double</span> width;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">double</span> heigh;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Rectangle</span><span class="params">(<span class="keyword">double</span> width, <span class="keyword">double</span> heigh)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.width = width;</div><div class="line">        <span class="keyword">this</span>.heigh = heigh;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">getArea</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> width * heigh;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">// subclass 2</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Circle</span> <span class="keyword">extends</span> <span class="title">Shape</span> </span>&#123;</div><div class="line">  </div><div class="line">  <span class="comment">// Private data member</span></div><div class="line">  <span class="keyword">private</span> <span class="keyword">double</span> radius;</div><div class="line"></div><div class="line">  <span class="comment">// Constructor</span></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="title">Circle</span><span class="params">(<span class="keyword">double</span> radius)</span> </span>&#123;</div><div class="line">    <span class="keyword">this</span>.radius = radius; </div><div class="line">  &#125;</div><div class="line">  </div><div class="line">  <span class="comment">// Public method to calculate Area</span></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">getArea</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="number">3.14</span> * radius * radius; </div><div class="line">  &#125;</div><div class="line">  </div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        Shape rect = <span class="keyword">new</span> Rectangle(<span class="number">3</span>, <span class="number">4</span>);</div><div class="line">        Shape circle = <span class="keyword">new</span> Circle(<span class="number">4</span>);</div><div class="line"></div><div class="line">        System.out.println(rect.getArea()); <span class="comment">// 12.0</span></div><div class="line">        System.out.println(circle.getArea()); <span class="comment">// 50.24</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p><strong>Python OOP</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><div class="line"> </div></pre></td></tr></table></figure>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<ul>
<li><h2 id="Abstract">Abstract</h2><ul>
<li><h4 id="Definition-3">Definition</h4><p>It shows only the essential features of an object to the user and hides the inner details to reduce complexity.</p>
</li>
<li><h4 id="Illustration-3">Illustration</h4><p><img src="/img/abstract-principle.png" alt="abstract-principle"></p>
</li>
<li><h4 id="How">How</h4><p>How to achieve abstraction?</p>
<p><code>Anstract</code> class and <code>Interface</code>.</p>
</li>
<li><h4 id="Advantages-3">Advantages</h4><p>It can reduce code complexity.</p>
</li>
<li><h4 id="Example-3">Example</h4><ul>
<li><p><strong>Java OOP</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="comment">// Abstract class</span></div><div class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Animal</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">makeSound</span><span class="params">()</span></span>;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">move</span><span class="params">()</span> </span>&#123;</div><div class="line">        System.out.println(getClass().getSimpleName()+<span class="string">" is moving"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span> <span class="keyword">extends</span> <span class="title">Animal</span> </span>&#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">makeSound</span><span class="params">()</span> </span>&#123;</div><div class="line">        System.out.println(<span class="string">"Woof Woof...."</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Cat</span> <span class="keyword">extends</span> <span class="title">Animal</span> </span>&#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">makeSound</span><span class="params">()</span> </span>&#123;</div><div class="line">        System.out.println(<span class="string">"Meow Meow...."</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</div><div class="line">        Animal dog = <span class="keyword">new</span> Dog();</div><div class="line">        Animal cat = <span class="keyword">new</span> Cat();</div><div class="line">        <span class="comment">// Dog is moving</span></div><div class="line">        dog.move();</div><div class="line">        <span class="comment">// Cat is moving</span></div><div class="line">        cat.move();</div><div class="line">        <span class="comment">// Woof Woof....</span></div><div class="line">        dog.makeSound();</div><div class="line">        <span class="comment">// Meow Meow....</span></div><div class="line">        cat.makeSound();</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">// Interface</span></div></pre></td></tr></table></figure>
</li>
<li><p><strong>Python OOP</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><div class="line"> </div></pre></td></tr></table></figure>
</li>
</ul>
</li>
</ul>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;The four principles of OOP are: Encapsulation, Inheritance, Polymorphism, and Abstract. Let’s introduce each principle in the following paragraphs. &lt;/p&gt;
&lt;p&gt;It is study note from &lt;a href=&quot;https://www.educative.io/courses/learn-object-oriented-programming-in-java&quot;&gt;Educative.io&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="OOP" scheme="https://wing324.github.io/categories/OOP/"/>
    
    
      <category term="oop" scheme="https://wing324.github.io/tags/oop/"/>
    
      <category term="object-orientated programming" scheme="https://wing324.github.io/tags/object-orientated-programming/"/>
    
      <category term="polymorphism" scheme="https://wing324.github.io/tags/polymorphism/"/>
    
      <category term="encapsulation" scheme="https://wing324.github.io/tags/encapsulation/"/>
    
      <category term="inheritance" scheme="https://wing324.github.io/tags/inheritance/"/>
    
      <category term="abstract" scheme="https://wing324.github.io/tags/abstract/"/>
    
  </entry>
  
  <entry>
    <title>Inheritance and super Example in Python</title>
    <link href="https://wing324.github.io/2020/03/23/Inheritance-in-Python/"/>
    <id>https://wing324.github.io/2020/03/23/Inheritance-in-Python/</id>
    <published>2020-03-24T00:24:03.000Z</published>
    <updated>2020-03-24T00:41:00.051Z</updated>
    
    <content type="html"><![CDATA[<p>I always forget how to write inheritance in Python. Today, I saw a good example in <a href="https://www.educative.io/courses/learn-object-oriented-programming-in-python/qAXDNK8QB6y" target="_blank" rel="external">Educative.io</a> which is easy for me to understand and remember.<br><a id="more"></a></p>
<figure class="highlight python"><table><tr><td class="code"><pre><div class="line"><span class="comment"># Parent class</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Vehicle</span>:</span></div><div class="line">  fuelCap = <span class="number">90</span></div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, color, model)</span>:</span></div><div class="line">    self.color = color</div><div class="line">    self.model = model</div><div class="line">  </div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">printDetails</span><span class="params">(self)</span>:</span></div><div class="line">    print(self.color)</div><div class="line">    print(self.model)</div><div class="line"></div><div class="line"><span class="comment"># Sub class</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Car</span><span class="params">(Vehicle)</span>:</span></div><div class="line">  fuelCap = <span class="number">50</span></div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, color, model, doors)</span>:</span></div><div class="line">    <span class="comment"># inheritant constrator from parent class</span></div><div class="line">    Vehicle.__init__(self, color, model)</div><div class="line">    self.doors = doors</div><div class="line">  </div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">printCarDetails</span><span class="params">(self)</span>:</span></div><div class="line">    <span class="comment"># inheritant method from parent class</span></div><div class="line">    self.printDetails()</div><div class="line">    print(self.doors)</div><div class="line">  </div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">printFuel</span><span class="params">(self)</span>:</span></div><div class="line">    <span class="comment"># super instead of Parent class name</span></div><div class="line">    print(<span class="string">"Parent fuelCap: "</span>,super().fuelCap)</div><div class="line">    print(<span class="string">"Vehical fuelCap:"</span>, Vehicle.fuelCap)</div><div class="line">    print(<span class="string">"Self fuelCap:"</span>, self.fuelCap)</div><div class="line"></div><div class="line">car1 = Car(<span class="string">"Red"</span>, <span class="string">"BMW"</span>, <span class="number">4</span>)</div><div class="line">car1.printCarDetails()</div><div class="line"></div><div class="line"><span class="comment">### output</span></div><div class="line">Red</div><div class="line">BMW</div><div class="line"><span class="number">4</span></div><div class="line">Parent fuelCap:  <span class="number">90</span></div><div class="line">Vehical fuelCap: <span class="number">90</span></div><div class="line">Self fuelCap: <span class="number">50</span></div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;I always forget how to write inheritance in Python. Today, I saw a good example in &lt;a href=&quot;https://www.educative.io/courses/learn-object-oriented-programming-in-python/qAXDNK8QB6y&quot;&gt;Educative.io&lt;/a&gt; which is easy for me to understand and remember.&lt;br&gt;
    
    </summary>
    
      <category term="Python" scheme="https://wing324.github.io/categories/Python/"/>
    
    
      <category term="Inheritance" scheme="https://wing324.github.io/tags/Inheritance/"/>
    
  </entry>
  
  <entry>
    <title>Python Private Methods And Variables</title>
    <link href="https://wing324.github.io/2020/03/23/Python-Private-Methods-And-Variables/"/>
    <id>https://wing324.github.io/2020/03/23/Python-Private-Methods-And-Variables/</id>
    <published>2020-03-23T23:36:33.000Z</published>
    <updated>2020-03-23T23:47:52.002Z</updated>
    
    <content type="html"><![CDATA[<p>Python doesn’t have <code>private</code> method and variable like the OOD programming language. But, we do have other way to do it.</p>
<a id="more"></a>
<p>In Python, we can use <code>__</code> (double underscore) to make a method or variable private. </p>
<h3 id="Private_Variable">Private Variable</h3><p>Code as below:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">class Person:</div><div class="line">    def __init__(self, name, age):</div><div class="line">        self.name = name</div><div class="line">        # age is a private variable</div><div class="line">        self.__age = age  </div><div class="line"></div><div class="line">Bob = Person(&quot;Bob&quot;, 17)</div><div class="line">print(&quot;name:&quot;, Bob.name)</div><div class="line"># this will cause an error: no `__age` variable</div><div class="line">print(&quot;Age:&quot;, Bob.__age)</div></pre></td></tr></table></figure>
<h3 id="Private_Method">Private Method</h3><p>Code as below:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">class Person:</div><div class="line">    def __init__(self, name, age):</div><div class="line">        self.name = name</div><div class="line">        # age is a private variable</div><div class="line">        self.age = age </div><div class="line">     </div><div class="line">     def __agePlus(self):</div><div class="line">     	self.age = self.age+1</div><div class="line"></div><div class="line">Bob = Person(&quot;Bob&quot;, 17)</div><div class="line"># this method will cause an error: no &apos;__agePlus&apos; method</div><div class="line">Bob.__agePlus()</div></pre></td></tr></table></figure>
<h3 id="Access_Private_Stuff">Access Private Stuff</h3><p>Code as below:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name, age)</span>:</span></div><div class="line">        self.name = name</div><div class="line">        <span class="comment"># age is a private variable</span></div><div class="line">        self.__age = age  </div><div class="line"></div><div class="line">Bob = Person(<span class="string">"Bob"</span>, <span class="number">17</span>)</div><div class="line">print(<span class="string">"name:"</span>, Bob.name)</div><div class="line"><span class="comment"># this will cause an error: no `__age` variable</span></div><div class="line">print(<span class="string">"Age:"</span>, Bob.__age) </div><div class="line"><span class="comment"># we can access __age like this:</span></div><div class="line">print(Bob._Person__age)</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Python doesn’t have &lt;code&gt;private&lt;/code&gt; method and variable like the OOD programming language. But, we do have other way to do it.&lt;/p&gt;
    
    </summary>
    
      <category term="Python" scheme="https://wing324.github.io/categories/Python/"/>
    
    
      <category term="private method" scheme="https://wing324.github.io/tags/private-method/"/>
    
      <category term="private variable" scheme="https://wing324.github.io/tags/private-variable/"/>
    
  </entry>
  
  <entry>
    <title>Instance method, Class method, and Static method in Python Class</title>
    <link href="https://wing324.github.io/2020/03/23/Instance-method-Class-method-and-Static-method-in-Python/"/>
    <id>https://wing324.github.io/2020/03/23/Instance-method-Class-method-and-Static-method-in-Python/</id>
    <published>2020-03-23T22:43:10.000Z</published>
    <updated>2020-03-23T23:12:27.588Z</updated>
    
    <content type="html"><![CDATA[<p>This article is going to talk about the difference between instance method, class method, and static method in Python class.<br><a id="more"></a></p>
<h3 id="Instance_Method">Instance Method</h3><p>Instance method is the most used method in python class. The instance method can be accessed by each instance. Each instance has its own instance variables. So, instance methods are used to access and modify instance variables. </p>
<p>Instance Method must have <code>self</code> argument as the first argument of the instance method. <code>self</code> just a name, it can be a different name.  <code>self</code> refers to the instance.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Employee</span>:</span></div><div class="line">  <span class="comment">#  constructor</span></div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, ID=None, name=None, department=None)</span>:</span></div><div class="line">    self.ID = ID</div><div class="line">    self.name = name</div><div class="line">    self.department = department</div><div class="line">  </div><div class="line">  <span class="comment"># instance method</span></div><div class="line">  <span class="comment"># a,b,c,d is instance variables</span></div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">demo</span><span class="params">(self, a, b, c=<span class="number">4</span>, d=None)</span>:</span></div><div class="line">    print(a)</div><div class="line">    print(b)</div><div class="line">    print(c)</div><div class="line">    print(d)</div></pre></td></tr></table></figure>
<h3 id="Class_Method">Class Method</h3><p>Class method works with class variables and access by class name. It also can access by instance, but we would like to access it by class name.  All the class instances share the class variables and class method. So, class methods are used to access and modify class variables.</p>
<p>Class method must have <code>@classmethod</code> before the class method. And class method must have <code>cls</code> as the first argument. <code>cls</code> just a name, it can be a different name, <code>cls</code> refers to the class.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Employee</span>:</span></div><div class="line">  <span class="comment"># class variable</span></div><div class="line">  <span class="comment"># Access/Update by all instances</span></div><div class="line">  team = <span class="string">"IT"</span></div><div class="line">  </div><div class="line">  <span class="comment"># class method</span></div><div class="line"><span class="meta">  @classmethod</span></div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">getTeamName</span><span class="params">(cls)</span>:</span></div><div class="line">    <span class="keyword">return</span> cls.team</div><div class="line"></div><div class="line">Steve = Employee()</div><div class="line"></div><div class="line"><span class="comment"># use class method</span></div><div class="line">print(Steve.getTeamName())</div><div class="line"><span class="comment"># Prefer to use this way to use class method</span></div><div class="line">print(Employee.getTeamName())</div></pre></td></tr></table></figure>
<h3 id="Static_Method">Static Method</h3><p>Static method is not related to class variables or instance variables. It contains some fixed information and can not be modified. </p>
<p>Static method must have <code>@staticmethod</code> before the static method. And static method don’t have to use <code>self</code> or <code>cls</code> as first argument. It doesn’t have any mandatory argument.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Employee</span>:</span></div><div class="line">  <span class="comment"># static method</span></div><div class="line">  <span class="comment"># static method don't need to use self/cls</span></div><div class="line"><span class="meta">  @staticmethod</span></div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">sMethod</span><span class="params">()</span>:</span></div><div class="line">    print(<span class="string">"I am a static method"</span>)</div><div class="line"></div><div class="line"><span class="comment"># use static method</span></div><div class="line">Steve.sMethod()</div><div class="line"><span class="comment"># Prefer to use this way to use static method</span></div><div class="line">Employee.sMethod()</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;This article is going to talk about the difference between instance method, class method, and static method in Python class.&lt;br&gt;
    
    </summary>
    
      <category term="Python" scheme="https://wing324.github.io/categories/Python/"/>
    
    
      <category term="instance method" scheme="https://wing324.github.io/tags/instance-method/"/>
    
      <category term="class method" scheme="https://wing324.github.io/tags/class-method/"/>
    
      <category term="static method" scheme="https://wing324.github.io/tags/static-method/"/>
    
      <category term="class" scheme="https://wing324.github.io/tags/class/"/>
    
  </entry>
  
  <entry>
    <title>How to deploy an app on Heroku</title>
    <link href="https://wing324.github.io/2020/01/29/How-to-deploy-an-app-on-Heroku/"/>
    <id>https://wing324.github.io/2020/01/29/How-to-deploy-an-app-on-Heroku/</id>
    <published>2020-01-30T07:24:38.000Z</published>
    <updated>2020-01-30T07:27:26.403Z</updated>
    
    <content type="html"><![CDATA[<p>This is a blog for deploying an app on Heroku</p>
<a id="more"></a>
<ul>
<li><p>First of all, you should have a Heroku account, if you don’t have it, just sign up for free.</p>
</li>
<li><p>Then, you should have an app, if you don’t have, you can just use the sample. Assume our source code in <code>src</code> folder</p>
<p><strong>We have to put our code at root folder, because Heroku will find code at root folder, the root folder in the post is <code>src</code> folder</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="comment">// src/index.js</span></div><div class="line"></div><div class="line"><span class="comment">// import express by using require, since node.js doesn't support import express</span></div><div class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>);</div><div class="line"><span class="keyword">const</span> app = express();</div><div class="line"></div><div class="line">app.get(<span class="string">'/'</span>, (req, res) =&gt; &#123;</div><div class="line">  res.send(&#123;<span class="string">'hi'</span>: <span class="string">'there'</span>&#125;);</div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="comment">// process.env.PORT in order to user Heroku port for our app</span></div><div class="line"><span class="keyword">const</span> PORT = process.env.PORT || <span class="number">5000</span></div><div class="line">app.listen(PORT);</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">// src/package.json</span></div><div class="line"><span class="comment">// we have to add "engines" field to tell HeroKu what version of node+npm you used</span></div><div class="line"><span class="comment">// we have to add "scripts" field to tell HeroKu how to run our app</span></div><div class="line"></div><div class="line">&#123;</div><div class="line">  <span class="string">"name"</span>: <span class="string">"src"</span>,</div><div class="line">  <span class="string">"version"</span>: <span class="string">"1.0.0"</span>,</div><div class="line">  <span class="string">"description"</span>: <span class="string">""</span>,</div><div class="line">  <span class="string">"main"</span>: <span class="string">"index.js"</span>,</div><div class="line">  <span class="string">"engines"</span>: &#123;</div><div class="line">    <span class="string">"node"</span>: <span class="string">"10.16.0"</span>,</div><div class="line">    <span class="string">"npm"</span>: <span class="string">"6.9.0"</span></div><div class="line">  &#125;,</div><div class="line">  <span class="string">"scripts"</span>: &#123;</div><div class="line">    <span class="string">"start"</span>: <span class="string">"node index.js"</span></div><div class="line">  &#125;,</div><div class="line">  <span class="string">"author"</span>: <span class="string">"Wing Yu"</span>,</div><div class="line">  <span class="string">"license"</span>: <span class="string">"ISC"</span>,</div><div class="line">  <span class="string">"dependencies"</span>: &#123;</div><div class="line">    <span class="string">"express"</span>: <span class="string">"^4.17.1"</span></div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>Install Heroku CLI</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">$ npm install -g heroku</div></pre></td></tr></table></figure>
</li>
<li><p>Check Heroku installation</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">$ heroku --version</div><div class="line">heroku/7.37.0 win32-x64 node-v10.16.0</div></pre></td></tr></table></figure>
</li>
<li><p>Login your Heroku by Heroku CLI</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">$ heroku login</div><div class="line">heroku: Press any key to open up the browser to login or q to exit:</div></pre></td></tr></table></figure>
</li>
<li><p>Go to your app root folder(the post is <code>src</code> folder), and create Heroku app</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">cd src/</div><div class="line">heroku create</div><div class="line"># After you finish run the command, you will get 2 link</div><div class="line"># link1 | link2</div><div class="line"># link1 is your app website</div><div class="line"># link2 is your app git repo site on Heroku</div></pre></td></tr></table></figure>
</li>
<li><p>Push your code into GitHub, you should have a git repo for your app.</p>
</li>
<li><p>Add your git repo into your Heroku git repo</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">git remote add heroku link2</div></pre></td></tr></table></figure>
</li>
<li><p>Push your GitHub code to your Heroku git repo</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">git push heroku master</div></pre></td></tr></table></figure>
</li>
<li><p>Open your app on Heroku </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">heroku open</div><div class="line"># or open link1</div></pre></td></tr></table></figure>
</li>
<li><p>If you have any issue, you can also look the Heroku log</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">heroku logs</div></pre></td></tr></table></figure>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;This is a blog for deploying an app on Heroku&lt;/p&gt;
    
    </summary>
    
      <category term="Heroku" scheme="https://wing324.github.io/categories/Heroku/"/>
    
    
      <category term="react" scheme="https://wing324.github.io/tags/react/"/>
    
      <category term="express" scheme="https://wing324.github.io/tags/express/"/>
    
      <category term="heroku" scheme="https://wing324.github.io/tags/heroku/"/>
    
  </entry>
  
  <entry>
    <title>React Uses SVG by svgr tool</title>
    <link href="https://wing324.github.io/2019/09/20/React-Uses-SVG-by-svgr-tool/"/>
    <id>https://wing324.github.io/2019/09/20/React-Uses-SVG-by-svgr-tool/</id>
    <published>2019-09-21T06:37:42.000Z</published>
    <updated>2019-09-21T06:43:11.453Z</updated>
    
    <content type="html"><![CDATA[<p>svgr tool helps us automatically change svg file to React component, which is easy for us use.</p>
<a id="more"></a>
<ol>
<li><p>Create <code>assests</code> and <code>Icons</code> folder under <code>src</code> folder.</p>
</li>
<li><p>Put SVG source code into <code>assests</code> folder.</p>
</li>
<li><p>In <code>package.json</code> file, we add the following script:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">&quot;scripts&quot;: &#123;</div><div class="line">    &quot;svgr&quot;: &quot;svgr -d src/Icons/ src/assets/&quot;</div><div class="line">  &#125;,</div></pre></td></tr></table></figure>
</li>
<li><p>Then, let’s download <code>svgr</code> tool by Yarn.</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">yarn add @svgr/cli</div></pre></td></tr></table></figure>
</li>
<li><p>The last step we will run command <code>yarn run svgr</code>.</p>
<p>When the command finished, we can check <code>Icons</code> folder, we will find <code>svgr</code> tool helps us convert all svg files to react components(js files).</p>
</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;svgr tool helps us automatically change svg file to React component, which is easy for us use.&lt;/p&gt;
    
    </summary>
    
      <category term="React" scheme="https://wing324.github.io/categories/React/"/>
    
    
      <category term="SVG" scheme="https://wing324.github.io/tags/SVG/"/>
    
      <category term="React" scheme="https://wing324.github.io/tags/React/"/>
    
      <category term="svgr" scheme="https://wing324.github.io/tags/svgr/"/>
    
  </entry>
  
  <entry>
    <title>Setup React app on AWS EC2 instance</title>
    <link href="https://wing324.github.io/2019/09/20/Setup-React-app-on-AWS-EC2-instance/"/>
    <id>https://wing324.github.io/2019/09/20/Setup-React-app-on-AWS-EC2-instance/</id>
    <published>2019-09-21T06:37:15.000Z</published>
    <updated>2019-09-21T06:40:48.770Z</updated>
    
    <content type="html"><![CDATA[<p>How to setup React app on AWS EC2 instance.</p>
<a id="more"></a>
<h4 id="1-_yarn_run_build">1. yarn run build</h4><p>First of all, we should build our project by running <code>yarn run build</code>, and we will get a director under our project root directory call <code>dist</code> or <code>build</code>, then we will upload the <code>dist</code> folder to our AWS EC2 instance.<br>With this article, I will put <code>dist</code> director to <code>/data</code> director on AWS.</p>
<h4 id="2-_yum_install_Nginx">2. yum install Nginx</h4><h4 id="3-_Change_Nginx_config">3. Change Nginx config</h4><p><strong>Normally, we won’t use root user to do it, but at here I will use root user for convenience.</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">vim /etc/nginx/nginx.conf</div><div class="line"></div><div class="line">## updated config </div><div class="line">user root; ## updated</div><div class="line">worker_processes auto;</div><div class="line">error_log /var/log/nginx/error.log;</div><div class="line">pid /run/nginx.pid;</div><div class="line"></div><div class="line"># Load dynamic modules. See /usr/share/doc/nginx/README.dynamic.</div><div class="line">include /usr/share/nginx/modules/*.conf;</div><div class="line"></div><div class="line"></div><div class="line">events &#123;</div><div class="line">    worker_connections 1024;</div><div class="line">&#125;</div><div class="line"></div><div class="line">http &#123;</div><div class="line">    log_format  main  &apos;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &apos;</div><div class="line">                      &apos;$status $body_bytes_sent &quot;$http_referer&quot; &apos;</div><div class="line">                      &apos;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&apos;;</div><div class="line"></div><div class="line">    access_log  /var/log/nginx/access.log  main;</div><div class="line"></div><div class="line">    sendfile            on;</div><div class="line">    tcp_nopush          on;</div><div class="line">    tcp_nodelay         on;</div><div class="line">    keepalive_timeout   65;</div><div class="line">    types_hash_max_size 2048;</div><div class="line"></div><div class="line">    include             /etc/nginx/mime.types;</div><div class="line">    default_type        application/octet-stream;</div><div class="line">	include /etc/nginx/vhost/*.conf;  ### updated</div><div class="line"></div><div class="line">    server &#123;</div><div class="line">        listen       80 default_server;</div><div class="line">        listen       [::]:80 default_server;</div><div class="line">        server_name  _;</div><div class="line">        root         /usr/share/nginx/html;</div><div class="line"></div><div class="line">#        # Load configuration files for the default server block.</div><div class="line">        include /etc/nginx/default.d/*.conf;</div><div class="line"></div><div class="line">       location / &#123;</div><div class="line">        &#125;</div><div class="line"></div><div class="line"></div><div class="line">        error_page 404 /404.html;</div><div class="line">            location = /40x.html &#123;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        error_page 500 502 503 504 /50x.html;</div><div class="line">            location = /50x.html &#123;</div><div class="line">        &#125;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<h4 id="4-_Make_own_Nginx_config">4. Make own Nginx config</h4><ul>
<li><p>Create <code>/etc/nginx/vhost</code> directory to save our own Nginx config</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">mkdir /etc/nginx/vhost</div></pre></td></tr></table></figure>
</li>
<li><p>Make own Nginx config</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">vim /etc/nginx/vhost/react.conf</div><div class="line"></div><div class="line">### updated</div><div class="line">server &#123;</div><div class="line">           listen      3000;</div><div class="line">           server_name  localhost;</div><div class="line">           root /data/dist;</div><div class="line">           location / &#123;</div><div class="line">                     try_files $uri $uri/ /index.html;</div><div class="line">                &#125;</div><div class="line">           error_page   500 502 503 504  /50x.html;</div><div class="line">           location = /50x.html &#123;</div><div class="line">                root   html;</div><div class="line">        &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<h4 id="5-_Change_user_and_mode_for_build_folder">5. Change user and mode for build folder</h4><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">chown -R root:root /data/dist</div><div class="line">chmod 755 /data/dist</div></pre></td></tr></table></figure>
<h4 id="6-_Run_your_Nginx">6. Run your Nginx</h4><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">systemctl start nginx</div></pre></td></tr></table></figure>
<h4 id="7-_Disable_SELinux">7. Disable SELinux</h4><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line"># Temporary</div><div class="line">setenforce 0</div><div class="line"># permanent</div><div class="line">vim /etc/selinux/config</div><div class="line"></div><div class="line"># change SELINUX=enforcing to SELINUX=disabled</div></pre></td></tr></table></figure>
<h4 id="Now_you_can_use_IP_and_port_to_get_the_React_App-">Now you can use IP and port to get the React App.</h4>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;How to setup React app on AWS EC2 instance.&lt;/p&gt;
    
    </summary>
    
      <category term="React" scheme="https://wing324.github.io/categories/React/"/>
    
    
      <category term="React" scheme="https://wing324.github.io/tags/React/"/>
    
      <category term="setup" scheme="https://wing324.github.io/tags/setup/"/>
    
      <category term="AWS" scheme="https://wing324.github.io/tags/AWS/"/>
    
  </entry>
  
  <entry>
    <title>How to set up a React Project without create-react-app</title>
    <link href="https://wing324.github.io/2019/07/27/How-to-set-up-a-React-Project-without-create-react-app/"/>
    <id>https://wing324.github.io/2019/07/27/How-to-set-up-a-React-Project-without-create-react-app/</id>
    <published>2019-07-28T05:35:09.000Z</published>
    <updated>2019-07-28T05:36:46.163Z</updated>
    
    <content type="html"><![CDATA[<p>This is a blog for creating a new React project without create-react-app tools.</p>
<a id="more"></a>
<h3 id="1-_Set_up_project">1. Set up project</h3><h4 id="-_Setting_up_Node-js_or_Yarn">- Setting up Node.js or Yarn</h4><blockquote>
<p>You can download Node.js or Yarn from their official website:<br>Node.js: <a href="https://nodejs.org/en/download/" target="_blank" rel="external">https://nodejs.org/en/download/</a><br>Yarn: <a href="https://yarnpkg.com/lang/en/docs/install/#windows-stable" target="_blank" rel="external">https://yarnpkg.com/lang/en/docs/install/#windows-stable</a></p>
</blockquote>
<p>Initializing the project</p>
<blockquote>
<ul>
<li>Create a new and empty directory for the project, and get into the new directory.</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">&gt; mkdir newProject</div><div class="line">&gt; cd newProject</div><div class="line">&gt;</div></pre></td></tr></table></figure>
</blockquote>
<p>&gt;</p>
<blockquote>
<ul>
<li>Initialize the project</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">&gt; npm init</div><div class="line">&gt; // or</div><div class="line">&gt; yarn init</div><div class="line">&gt;</div></pre></td></tr></table></figure>
</blockquote>
<p>&gt;</p>
<blockquote>
<ul>
<li>Create a <code>src</code> directory to store the project source code inside <code>newProject</code> directory</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">&gt; mkdir src</div><div class="line">&gt;</div></pre></td></tr></table></figure>
</blockquote>
<p>&gt;</p>
<blockquote>
<ul>
<li>Utill now, the project directory looks like:</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">&gt; newProject</div><div class="line">&gt; |--src</div><div class="line">&gt;</div></pre></td></tr></table></figure>
</blockquote>
<h4 id="-_Setting_up_Webpack">- Setting up Webpack</h4><blockquote>
<ul>
<li>Install Webpack related package</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">&gt; npm install --save-dev webpack webpack-dev-server webpack-cli</div><div class="line">&gt; //or</div><div class="line">&gt; yarn add webpack webpack-dev-server webpack-cli</div><div class="line">&gt;</div></pre></td></tr></table></figure>
</blockquote>
<p>&gt;</p>
<blockquote>
<ul>
<li>Create a new file <code>webpack.config.js</code> under <code>newProject</code> folder, and put the below code into the <code>webpack.config.js</code> file.</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">&gt; const path = require(&apos;path&apos;);</div><div class="line">&gt; module.exports = &#123;</div><div class="line">&gt;    // define entry file and output</div><div class="line">&gt;    entry: &apos;./src/index.js&apos;,</div><div class="line">&gt;    output: &#123;</div><div class="line">&gt;        path: path.resolve(&apos;dist&apos;),</div><div class="line">&gt;        filename: &apos;main.js&apos;</div><div class="line">&gt;    &#125;,</div><div class="line">&gt;    // define babel loader</div><div class="line">&gt;    module: &#123;</div><div class="line">&gt;        rules: [</div><div class="line">&gt;            &#123; test: /\.jsx?$/, loader: &apos;babel-loader&apos;, exclude: /node_modules/ &#125;</div><div class="line">&gt;        ]</div><div class="line">&gt;    &#125;</div><div class="line">&gt; &#125;;</div><div class="line">&gt;</div></pre></td></tr></table></figure>
</blockquote>
<h4 id="-_Setting_up_Babel">- Setting up Babel</h4><blockquote>
<ul>
<li>Install Babel related package</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">&gt; npm install --save-dev babel-core babel-loader babel-preset-es2015 babel-preset-react @babel/core @babel/preset-env @babel/preset-react</div><div class="line">&gt; npm install --save-dev babel-plugin-transform-object-rest-spread </div><div class="line">&gt; // or</div><div class="line">&gt; yarn add  babel-core babel-loader babel-preset-es2015</div><div class="line">&gt; yarn add babel-plugin-transform-object-rest-spread</div><div class="line">&gt;</div></pre></td></tr></table></figure>
</blockquote>
<p>&gt;</p>
<blockquote>
<ul>
<li>Create a new file <code>.babelrc</code> under <code>newProject</code> folder, and put the below code into the <code>.babelrc</code> file.</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">&gt; &#123;</div><div class="line">&gt;  &quot;presets&quot;:[</div><div class="line">&gt;    &quot;@babel/preset-env&quot;,</div><div class="line">&gt;    &quot;@babel/preset-react&quot;],</div><div class="line">&gt;  &quot;plugins&quot;: [ &quot;transform-object-rest-spread&quot; ]</div><div class="line">&gt; &#125;</div><div class="line">&gt;</div></pre></td></tr></table></figure>
</blockquote>
<h4 id="-_Setting_up_the_entry_files">- Setting up the entry files</h4><blockquote>
<ul>
<li>Create <code>newProject/src/index.js</code> file, and put the below code into the file.</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">&gt; console.log(&apos;hello world!&apos;)</div><div class="line">&gt;</div></pre></td></tr></table></figure>
</blockquote>
<p>&gt;</p>
<blockquote>
<ul>
<li>Create <code>newProject/index.html</code> file, and put the below code into the file.</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">&gt; &lt;!DOCTYPE html&gt;</div><div class="line">&gt; &lt;html&gt;</div><div class="line">&gt;  &lt;head&gt;</div><div class="line">&gt;    &lt;meta charset=&quot;utf-8&quot;&gt;</div><div class="line">&gt;    &lt;title&gt;React&lt;/title&gt;</div><div class="line">&gt;  &lt;/head&gt;</div><div class="line">&gt;  &lt;body&gt;</div><div class="line">&gt;    &lt;div id=&quot;root&quot;&gt;&lt;/div&gt;</div><div class="line">&gt;    &lt;script src=&quot;main.js&quot;&gt;&lt;/script&gt;</div><div class="line">&gt;  &lt;/body&gt;</div><div class="line">&gt; &lt;/html&gt;</div><div class="line">&gt;</div></pre></td></tr></table></figure>
</blockquote>
<h4 id="-_Running_Project">- Running Project</h4><blockquote>
<ul>
<li>Put below code into <code>package.json</code> file.</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">&gt; &quot;scripts&quot;: &#123;</div><div class="line">&gt;  &quot;start&quot;: &quot;webpack-dev-server&quot;,</div><div class="line">&gt;  &quot;build&quot;: &quot;webpack&quot;</div><div class="line">&gt; &#125;,</div><div class="line">&gt;</div></pre></td></tr></table></figure>
</blockquote>
<p>&gt;</p>
<blockquote>
<ul>
<li>Run the project.</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">&gt; npm start</div><div class="line">&gt; // or</div><div class="line">&gt; yarn start</div><div class="line">&gt;</div></pre></td></tr></table></figure>
</blockquote>
<h3 id="2-_Set_up_React">2. Set up React</h3><h4 id="Install_React">Install React</h4><blockquote>
<p>Use the below command at the <code>newProject</code> folder.</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">&gt; npm install --save react react-dom</div><div class="line">&gt; // or</div><div class="line">&gt; yarn add react react-dom</div><div class="line">&gt;</div></pre></td></tr></table></figure>
</blockquote>
<h3 id="3-_Set_up_redux">3. Set up redux</h3><h4 id="Install_Redux">Install Redux</h4><blockquote>
<p>Use the below command at the <code>newProject</code> folder.</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">&gt; npm install --save redux react-redux</div><div class="line">&gt; // or</div><div class="line">&gt; yarn add redux react-redux</div><div class="line">&gt;</div></pre></td></tr></table></figure>
</blockquote>
<h3 id="4-_Set_up_JSX">4. Set up JSX</h3><h3 id="Install_JSX">Install JSX</h3><blockquote>
<p>Use the below command at the <code>newProject</code> folder.</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">&gt; npm install --save-dev babel-preset-react</div><div class="line">&gt; // or </div><div class="line">&gt; yarn add babel-preset-react</div><div class="line">&gt;</div></pre></td></tr></table></figure>
</blockquote>
<h3 id="Config_-babelrc_file">Config .babelrc file</h3>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;This is a blog for creating a new React project without create-react-app tools.&lt;/p&gt;
    
    </summary>
    
      <category term="React" scheme="https://wing324.github.io/categories/React/"/>
    
    
      <category term="react" scheme="https://wing324.github.io/tags/react/"/>
    
      <category term="redux" scheme="https://wing324.github.io/tags/redux/"/>
    
      <category term="babel" scheme="https://wing324.github.io/tags/babel/"/>
    
      <category term="webpack" scheme="https://wing324.github.io/tags/webpack/"/>
    
  </entry>
  
  <entry>
    <title>How to use create-react-app</title>
    <link href="https://wing324.github.io/2019/07/27/How-to-use-create-react-app/"/>
    <id>https://wing324.github.io/2019/07/27/How-to-use-create-react-app/</id>
    <published>2019-07-28T05:31:19.000Z</published>
    <updated>2019-12-06T18:46:58.413Z</updated>
    
    <content type="html"><![CDATA[<p>This is a blog for creating a new React project by using create-react-app tools.</p>
<a id="more"></a>
<ol>
<li><p>Install Node.js</p>
<p><a href="https://nodejs.org/en/" target="_blank" rel="external">https://nodejs.org/en/</a></p>
</li>
<li><p>Navigate to the folder where you want to create your new project, and create a project by using create-react-app, for example the new project name is “helloworld”</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">yarn create react-app my-app</div></pre></td></tr></table></figure>
</li>
</ol>
<ol>
<li><p>When you finished the above steps, you maybe have a error as below:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">A template was not provided. This is likely because you&apos;re using an outdated version of create-react-app.</div><div class="line">Please note that global installs of create-react-app are no longer supported.</div></pre></td></tr></table></figure>
<p>The reason is:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">If you&apos;ve previously installed create-react-app globally via npm install -g create-react-app, we recommend you uninstall the package using npm uninstall -g create-react-app to ensure that npx always uses the latest version.</div><div class="line"></div><div class="line">https://create-react-app.dev/docs/getting-started</div><div class="line">(According to create-react-app official site)</div></pre></td></tr></table></figure>
<p>So, make sure you use command below to  create your react app by create-react-app, :</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line"># either of them</div><div class="line">npx create-react-app my-app</div><div class="line">npm init react-app my-app</div><div class="line">yarn create react-app my-app</div></pre></td></tr></table></figure>
</li>
</ol>
<ol>
<li><p>Preview your project in your browser</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">cd helloworld</div><div class="line">npm start / yarn start</div></pre></td></tr></table></figure>
</li>
<li><p>Create a production build and you will get a “build” folder</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">npm run build</div></pre></td></tr></table></figure>
<p>When this has completed, you can follow the onscreen prompts to deploy it to your server or just test it locally using the popular <code>serve</code> node package</p>
</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;This is a blog for creating a new React project by using create-react-app tools.&lt;/p&gt;
    
    </summary>
    
      <category term="React" scheme="https://wing324.github.io/categories/React/"/>
    
    
      <category term="create-react-app" scheme="https://wing324.github.io/tags/create-react-app/"/>
    
  </entry>
  
  <entry>
    <title>Five underscores in Python</title>
    <link href="https://wing324.github.io/2019/06/27/Five-underscores-in-Python/"/>
    <id>https://wing324.github.io/2019/06/27/Five-underscores-in-Python/</id>
    <published>2019-06-28T04:08:45.000Z</published>
    <updated>2019-06-28T04:11:52.985Z</updated>
    
    <content type="html"><![CDATA[<p>Do you know what does means about <code>_var</code>,<code>var_</code>,<code>__var</code>,<code>__var__</code> and <code>_</code>, if you don’t know, let\’s get in details.<br><a id="more"></a></p>
<h4 id="1-__var(single_underscore)">1. _var(single underscore)</h4><p>This is a hint to programmer, it means the variable for internal use. It is just a hint, not enforce by Python.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="class"><span class="keyword">class</span> <span class="title">Test</span>:</span></div><div class="line"><span class="meta">... </span>    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></div><div class="line"><span class="meta">... </span>            self.foo = <span class="number">11</span></div><div class="line"><span class="meta">... </span>            self._bar = <span class="number">23</span></div><div class="line">...</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>t = Test()</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>t.foo</div><div class="line"><span class="number">11</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>t._bar</div><div class="line"><span class="number">23</span></div></pre></td></tr></table></figure>
<p>From the example, we can see that although _bar for internal use, we can also get it from outside. Because it is just a hint, not enforce by Python.</p>
<h4 id="2-_var_(single_underscore)">2. var_(single underscore)</h4><p>Sometimes, we already use a suitable name for others or some keyword we can not use as a variable name, so we can user <code>var_</code> instead of it.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">test</span><span class="params">(class_)</span>:</span></div><div class="line"><span class="meta">... </span>    print(<span class="string">"%s"</span>  %class_)</div><div class="line">...</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>test(<span class="string">"hello class_"</span>)</div><div class="line">hello class_</div></pre></td></tr></table></figure>
<p>For the instance, we can not use <code>class</code> as a variable name, but we can use <code>class_</code> as a variable name.</p>
<h4 id="3-___var(double_underscore)">3. __var(double underscore)</h4><p>A double underscore prefix cause Python rewrite the attribute name. This is also called <em>name mangling</em>, the Python interpreter change variable name in order to make it harder create collisions when the class is extended later, it also looks like private attribute.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="class"><span class="keyword">class</span> <span class="title">Test</span>:</span></div><div class="line"><span class="meta">... </span>    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></div><div class="line"><span class="meta">... </span>            self.foo=<span class="number">11</span></div><div class="line"><span class="meta">... </span>            self._bar = <span class="number">23</span></div><div class="line"><span class="meta">... </span>            self.__baz = <span class="number">23</span></div><div class="line">...</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>t1 = Test()</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>dir(t1)</div><div class="line">[<span class="string">'_Test__baz'</span>, <span class="string">'__class__'</span>, <span class="string">'__delattr__'</span>, <span class="string">'__dict__'</span>, <span class="string">'__dir__'</span>, <span class="string">'__doc__'</span>, <span class="string">'__eq__'</span>, <span class="string">'__format__'</span>, <span class="string">'__ge__'</span>, <span class="string">'__getattribute__'</span>, <span class="string">'__gt__'</span>, <span class="string">'__hash__'</span>, <span class="string">'__init__'</span>, <span class="string">'__init_subclass__'</span>, <span class="string">'__le__'</span>, <span class="string">'__lt__'</span>, <span class="string">'__module__'</span>, <span class="string">'__ne__'</span>, <span class="string">'__new__'</span>, <span class="string">'__reduce__'</span>, <span class="string">'__reduce_ex__'</span>, <span class="string">'__repr__'</span>, <span class="string">'__setattr__'</span>, <span class="string">'__sizeof__'</span>, <span class="string">'__str__'</span>, <span class="string">'__subclasshook__'</span>, <span class="string">'__weakref__'</span>, <span class="string">'_bar'</span>, <span class="string">'foo'</span>]</div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="class"><span class="keyword">class</span> <span class="title">ExtendedTest</span><span class="params">(Test)</span>:</span></div><div class="line"><span class="meta">... </span>    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></div><div class="line"><span class="meta">... </span>            super().__init__()</div><div class="line"><span class="meta">... </span>            self.foo = <span class="string">"overrideden"</span></div><div class="line"><span class="meta">... </span>            self._bar = <span class="string">"overrideden"</span></div><div class="line"><span class="meta">... </span>            self.__baz = <span class="string">"overrideden"</span></div><div class="line">...</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>t2 = ExtendedTest()</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>dir(t2)</div><div class="line">[<span class="string">'_ExtendedTest__baz'</span>, <span class="string">'_Test__baz'</span>, <span class="string">'__class__'</span>, <span class="string">'__delattr__'</span>, <span class="string">'__dict__'</span>, <span class="string">'__dir__'</span>, <span class="string">'__doc__'</span>, <span class="string">'__eq__'</span>, <span class="string">'__format__'</span>, <span class="string">'__ge__'</span>, <span class="string">'__getattribute__'</span>, <span class="string">'__gt__'</span>, <span class="string">'__hash__'</span>, <span class="string">'__init__'</span>, <span class="string">'__init_subclass__'</span>, <span class="string">'__le__'</span>, <span class="string">'__lt__'</span>, <span class="string">'__module__'</span>, <span class="string">'__ne__'</span>, <span class="string">'__new__'</span>, <span class="string">'__reduce__'</span>, <span class="string">'__reduce_ex__'</span>, <span class="string">'__repr__'</span>, <span class="string">'__setattr__'</span>, <span class="string">'__sizeof__'</span>, <span class="string">'__str__'</span>, <span class="string">'__subclasshook__'</span>, <span class="string">'__weakref__'</span>, <span class="string">'_bar'</span>, <span class="string">'foo'</span>]</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>t2.foo</div><div class="line"><span class="string">'overrideden'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>t2._bar</div><div class="line"><span class="string">'overrideden'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>t2.__baz</div><div class="line">Traceback (most recent call last):</div><div class="line">  File <span class="string">"&lt;stdin&gt;"</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</div><div class="line">AttributeError: <span class="string">'ExtendedTest'</span> object has no attribute <span class="string">'__baz'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>t2._ExtendedTest__baz</div><div class="line"><span class="string">'overrideden'</span></div></pre></td></tr></table></figure>
<p>From the example, we can see that variables name with double underscore prefix changed to another name inside, and we can not get the variable with the name we assigned to it, we should use the name which the Python interpreter assign to it. But, <strong>the amazing thing is our code can use the name we assigned inside of the class</strong>. Let\’s get another example:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="class"><span class="keyword">class</span> <span class="title">ManglingTest</span>:</span></div><div class="line"><span class="meta">... </span>    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></div><div class="line"><span class="meta">... </span>            self.__mangled = <span class="string">"hello"</span></div><div class="line"><span class="meta">... </span>    <span class="function"><span class="keyword">def</span> <span class="title">get_mangled</span><span class="params">(self)</span>:</span></div><div class="line"><span class="meta">... </span>            <span class="keyword">return</span> self.__mangled</div><div class="line">...</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>mtest = ManglingTest()</div><div class="line"><span class="comment"># we can not get __mangled outside of ManglingTest class</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>mtest.__mangled</div><div class="line">Traceback (most recent call last):</div><div class="line">  File <span class="string">"&lt;stdin&gt;"</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</div><div class="line">AttributeError: <span class="string">'ManglingTest'</span> object has no attribute <span class="string">'__mangled'</span></div><div class="line"><span class="comment"># ManglingTest method can get __mangled inside of ManglingTest class</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>mtest.get_mangled()</div><div class="line"><span class="string">'hello'</span></div></pre></td></tr></table></figure>
<h4 id="4-___var__(double_underscore)">4. __var__(double underscore)</h4><p><em>Name Mangling</em> doesn\’t apply for variable name starts and ends with double underscore. Variables name start and end with double underscore means the variable is constructor(like __init__)  or can be call by outside(like public attribute). Normally, we don\’t use start and end double underscore to name our variables.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">PrefixPostfixTest</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></div><div class="line">        self.__bam__ = <span class="number">42</span></div><div class="line"></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>PrefixPostfixTest().__bam__</div><div class="line"><span class="number">42</span></div></pre></td></tr></table></figure>
<h4 id="5-___(just_a_single_underscore)">5. _ (just a single underscore)</h4><p>_ is just temporary variables, and we don’t actually use it. it looks like placeholder variables.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><div class="line"><span class="comment"># temporary variables example </span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> _ <span class="keyword">in</span> range(<span class="number">32</span>):</div><div class="line"><span class="meta">... </span>    print(<span class="string">'Hello, World.'</span>)</div><div class="line"></div><div class="line"><span class="comment"># placeholder variables example</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>car = (<span class="string">'red'</span>, <span class="string">'auto'</span>, <span class="number">12</span>, <span class="number">3812.4</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>color, _, _, mileage = car</div><div class="line"></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>color</div><div class="line"><span class="string">'red'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>mileage</div><div class="line"><span class="number">3812.4</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>_</div><div class="line"><span class="number">12</span></div></pre></td></tr></table></figure>
<p>Reference: <a href="https://dbader.org/blog/meaning-of-underscores-in-python" target="_blank" rel="external">The Meaning of Underscores in Python</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Do you know what does means about &lt;code&gt;_var&lt;/code&gt;,&lt;code&gt;var_&lt;/code&gt;,&lt;code&gt;__var&lt;/code&gt;,&lt;code&gt;__var__&lt;/code&gt; and &lt;code&gt;_&lt;/code&gt;, if you don’t know, let\’s get in details.&lt;br&gt;
    
    </summary>
    
      <category term="Python" scheme="https://wing324.github.io/categories/Python/"/>
    
    
      <category term="underscores" scheme="https://wing324.github.io/tags/underscores/"/>
    
  </entry>
  
  <entry>
    <title>Time Complexity - Big O</title>
    <link href="https://wing324.github.io/2019/06/18/Time-Complexity/"/>
    <id>https://wing324.github.io/2019/06/18/Time-Complexity/</id>
    <published>2019-06-19T04:43:53.000Z</published>
    <updated>2019-06-19T04:47:04.701Z</updated>
    
    <content type="html"><![CDATA[<p>Data structure and sorting algorithm time complexity.<br><a id="more"></a></p>
<h4 id="1-_Array">1. Array</h4><p><img src="https://github.com/wing324/helloworld_zh/blob/master/img/array_img.png" alt=""></p>
<blockquote>
<p>Access: O(1)</p>
<p>Insert: O(N)</p>
<p>Delete: O(N)</p>
</blockquote>
<h4 id="2-_Linked_List">2. Linked List</h4><p><img src="https://github.com/wing324/helloworld_zh/blob/master/img/linkedList_img.png" alt=""></p>
<blockquote>
<p>Access: O(N)</p>
<p>Insert: O(1)</p>
<p>Delete: O(1)</p>
</blockquote>
<h4 id="3-_Stack(First_In_Last_Out)">3. Stack(First In Last Out)</h4><p><img src="https://github.com/wing324/helloworld_zh/blob/master/img/stack_img.png" alt=""></p>
<blockquote>
<p>Access: O(N)</p>
<p>Insert: O(1)</p>
<p>Delete: O(1)</p>
</blockquote>
<h4 id="4-_Queue(First_In_First_Out)">4. Queue(First In First Out)</h4><p><img src="https://github.com/wing324/helloworld_zh/blob/master/img/queue_img.png" alt=""></p>
<blockquote>
<p>Access: O(N)</p>
<p>Insert: O(1)</p>
<p>Delete: O(1)</p>
</blockquote>
<h3 id="Time_Complexity_Compare">Time Complexity Compare</h3><p><img src="https://github.com/wing324/helloworld_zh/blob/master/img/bigotccompare.jpeg" alt=""></p>
<h3 id="Data_Structure_Time_Complexity">Data Structure Time Complexity</h3><p><img src="https://github.com/wing324/helloworld_zh/blob/master/img/bigocheatsheet.png" alt=""></p>
<h3 id="Array_Sorting_Algorithm_Time_Complexity">Array Sorting Algorithm Time Complexity</h3><p><img src="https://github.com/wing324/helloworld_zh/blob/master/img/algorithmbigocheatsheet.png" alt=""></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Data structure and sorting algorithm time complexity.&lt;br&gt;
    
    </summary>
    
      <category term="Algorithm" scheme="https://wing324.github.io/categories/Algorithm/"/>
    
    
      <category term="Note" scheme="https://wing324.github.io/tags/Note/"/>
    
  </entry>
  
  <entry>
    <title>Python3 Brief Note</title>
    <link href="https://wing324.github.io/2019/06/16/Python3-Brief-Note/"/>
    <id>https://wing324.github.io/2019/06/16/Python3-Brief-Note/</id>
    <published>2019-06-17T03:29:06.000Z</published>
    <updated>2019-06-18T04:32:18.968Z</updated>
    
    <content type="html"><![CDATA[<p>Some knowledge hard to understand in Python.<br><a id="more"></a></p>
<h4 id="1-_List_Comprehension">1. List Comprehension</h4><figure class="highlight python"><table><tr><td class="code"><pre><div class="line"><span class="comment"># if item in list is even, return item*item</span></div><div class="line">[ i*i <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">11</span>) <span class="keyword">if</span>(i%<span class="number">2</span>==<span class="number">0</span>)]</div><div class="line"></div><div class="line"><span class="comment"># result</span></div><div class="line">[<span class="number">4</span>, <span class="number">16</span>, <span class="number">36</span>, <span class="number">64</span>, <span class="number">100</span>]</div></pre></td></tr></table></figure>
<h4 id="2-_Dict_Comprehension">2. Dict Comprehension</h4><figure class="highlight python"><table><tr><td class="code"><pre><div class="line"><span class="comment"># code without dict comprehension</span></div><div class="line">z_name = &#123;<span class="string">"A"</span>, <span class="string">"B"</span>,<span class="string">"C"</span>&#125;</div><div class="line">z_num = &#123;&#125;</div><div class="line"><span class="keyword">for</span> i <span class="keyword">in</span> z_name:</div><div class="line">    z_num[i]=<span class="number">0</span></div><div class="line">    </div><div class="line"><span class="comment"># code with dict comprehension</span></div><div class="line">z_name = &#123;<span class="string">"A"</span>,<span class="string">"B"</span>,<span class="string">"C"</span>&#125;</div><div class="line">z_num = [ i:<span class="number">0</span> <span class="keyword">for</span> i <span class="keyword">in</span> z_name]</div></pre></td></tr></table></figure>
<h4 id="3-_Exception">3. Exception</h4><figure class="highlight python"><table><tr><td class="code"><pre><div class="line"><span class="comment"># concept</span></div><div class="line"><span class="keyword">try</span>:</div><div class="line">    &lt;monitor code&gt;</div><div class="line"><span class="keyword">except</span> Exception:</div><div class="line">    &lt;exception code&gt;</div><div class="line"><span class="keyword">finally</span>:</div><div class="line">    &lt;excute code whether <span class="keyword">or</span> <span class="keyword">not</span> there <span class="keyword">is</span> an exception&gt;</div><div class="line">    </div><div class="line"><span class="comment"># example 1</span></div><div class="line"><span class="keyword">try</span>:</div><div class="line">    year = int(input(<span class="string">"PLS enter a year"</span>))</div><div class="line"><span class="keyword">except</span> ValueError:</div><div class="line">    print(<span class="string">"Please enter an INT for the input box."</span>)</div><div class="line">    </div><div class="line"><span class="comment"># example 2</span></div><div class="line"><span class="keyword">try</span>:</div><div class="line">    fo = open(<span class="string">"name.txt"</span>)</div><div class="line"><span class="keyword">except</span> Exception <span class="keyword">as</span> e:</div><div class="line">    print(e)</div><div class="line"><span class="keyword">finally</span>:</div><div class="line">    fo.close()</div></pre></td></tr></table></figure>
<h4 id="4-_Variable_Parameters_for_Function">4. Variable Parameters for Function</h4><figure class="highlight python"><table><tr><td class="code"><pre><div class="line"><span class="comment"># example</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">howlong</span><span class="params">(first, *others)</span>:</span></div><div class="line">    <span class="keyword">return</span> len(first) + len(others)</div><div class="line">print(howlong(<span class="string">"a"</span>, <span class="string">"def"</span>, <span class="string">"ghijklmn"</span>, <span class="string">"opq"</span>))</div><div class="line"></div><div class="line"><span class="comment"># result</span></div><div class="line"><span class="number">4</span></div></pre></td></tr></table></figure>
<h4 id="5-_Variable_Scope">5. Variable Scope</h4><figure class="highlight python"><table><tr><td class="code"><pre><div class="line"><span class="comment"># example without global</span></div><div class="line">x = <span class="number">123</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span><span class="params">()</span>:</span></div><div class="line">    x = <span class="number">456</span></div><div class="line">    print(<span class="string">"Inside X is: %d"</span> %x)</div><div class="line">func()</div><div class="line">print(<span class="string">"Outside X is: %d"</span> %x)</div><div class="line"></div><div class="line"><span class="comment"># result</span></div><div class="line">Inside X <span class="keyword">is</span>: <span class="number">456</span></div><div class="line">Outside X <span class="keyword">is</span>: <span class="number">123</span></div><div class="line">    </div><div class="line"><span class="comment"># example with global</span></div><div class="line">x = <span class="number">123</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span><span class="params">()</span>:</span></div><div class="line">    <span class="keyword">global</span> x</div><div class="line">    x = <span class="number">456</span></div><div class="line">    print(<span class="string">"Inside X is: %d"</span> %x)</div><div class="line">func()</div><div class="line">print(<span class="string">"Outside X is: %d"</span> %x)</div><div class="line"></div><div class="line"><span class="comment"># result</span></div><div class="line">Inside X <span class="keyword">is</span>: <span class="number">456</span></div><div class="line">Outside X <span class="keyword">is</span>: <span class="number">456</span></div></pre></td></tr></table></figure>
<h4 id="6-_lambda_expression">6. lambda expression</h4><figure class="highlight python"><table><tr><td class="code"><pre><div class="line"><span class="comment"># example</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>g = <span class="keyword">lambda</span> x:x+<span class="number">1</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>g(<span class="number">3</span>)</div><div class="line"><span class="number">4</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>g(<span class="number">5</span>)</div><div class="line"><span class="number">6</span></div><div class="line"></div><div class="line"><span class="comment"># filter example</span></div><div class="line">a = [<span class="number">1</span>,<span class="number">2</span> ,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>]</div><div class="line">print(list(filter(<span class="keyword">lambda</span> x:x&gt;<span class="number">4</span>, a)))</div><div class="line"><span class="comment"># result</span></div><div class="line">[<span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>]</div><div class="line"></div><div class="line"><span class="comment"># map example 1</span></div><div class="line">a = [<span class="number">1</span>,<span class="number">2</span> ,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>]</div><div class="line">print(list(map(<span class="keyword">lambda</span> x:x*x, a)))</div><div class="line"><span class="comment"># result</span></div><div class="line">[<span class="number">1</span>, <span class="number">4</span>, <span class="number">9</span>, <span class="number">16</span>, <span class="number">25</span>, <span class="number">36</span>, <span class="number">49</span>]</div><div class="line"></div><div class="line"><span class="comment"># map example 2</span></div><div class="line">a = [<span class="number">1</span>,<span class="number">2</span> ,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>]</div><div class="line">b = [<span class="number">11</span>,<span class="number">22</span>,<span class="number">33</span>,<span class="number">44</span>,<span class="number">55</span>,<span class="number">66</span>,<span class="number">77</span>]</div><div class="line">print(list(map(<span class="keyword">lambda</span> x,y:x*y, a, b)))</div><div class="line"><span class="comment"># result</span></div><div class="line">[<span class="number">11</span>, <span class="number">44</span>, <span class="number">99</span>, <span class="number">176</span>, <span class="number">275</span>, <span class="number">396</span>, <span class="number">539</span>]</div><div class="line"></div><div class="line"><span class="comment"># reduce example</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> functools <span class="keyword">import</span> reduce</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>reduce(<span class="keyword">lambda</span> x,y:x+y, [<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>],<span class="number">1</span>)</div><div class="line"><span class="number">25</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">1</span>+<span class="number">7</span>+<span class="number">8</span>+<span class="number">9</span></div><div class="line"><span class="number">25</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>reduce(<span class="keyword">lambda</span> x,y:x+y, [<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>],<span class="number">2</span>)</div><div class="line"><span class="number">26</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">2</span>+<span class="number">7</span>+<span class="number">8</span>+<span class="number">9</span></div><div class="line"><span class="number">26</span></div><div class="line"></div><div class="line"><span class="comment"># zip example</span></div></pre></td></tr></table></figure>
<h4 id="7-_Closure">7. Closure</h4><figure class="highlight"><table><tr><td class="code"><pre><div class="line"># example</div><div class="line">def func():</div><div class="line">    a = 1</div><div class="line">    b = 2</div><div class="line">    return a+b</div><div class="line">def sum(a):</div><div class="line">    def add(b):</div><div class="line">        return a+b</div><div class="line">    return add</div><div class="line">num1 = func()</div><div class="line">num2 = sum(1)</div><div class="line">print(type(num1))</div><div class="line">print(type(num2))</div><div class="line">print(num1)</div><div class="line">print(num2(2))</div><div class="line"></div><div class="line"># result</div><div class="line">&lt;class 'int'&gt;</div><div class="line">&lt;class 'function'&gt; # this is "add" function</div><div class="line">3</div><div class="line">3</div></pre></td></tr></table></figure>
<h4 id="8-_Decorator">8. Decorator</h4><figure class="highlight python"><table><tr><td class="code"><pre><div class="line"><span class="comment"># example</span></div><div class="line"><span class="keyword">import</span> time</div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">timer</span><span class="params">(func)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span><span class="params">()</span>:</span></div><div class="line">        start_time = time.time()</div><div class="line">        func()</div><div class="line">        stop_time = time.time()</div><div class="line">        print(<span class="string">"Total time is: %s second."</span> %(stop_time - start_time))</div><div class="line">    <span class="keyword">return</span> wrapper</div><div class="line"><span class="meta">@timer</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">i_can_sleep</span><span class="params">()</span>:</span></div><div class="line">    time.sleep(<span class="number">3</span>)</div><div class="line">i_can_sleep()</div><div class="line"></div><div class="line"><span class="comment"># result</span></div><div class="line">Total time <span class="keyword">is</span>: <span class="number">3.0007171630859375</span> second.</div></pre></td></tr></table></figure>
<h4 id="9-_Class">9. Class</h4><figure class="highlight python"><table><tr><td class="code"><pre><div class="line"><span class="comment"># example</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Player</span><span class="params">()</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name, life)</span>:</span></div><div class="line">        self.__name = name</div><div class="line">        self.life = life</div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">print_role</span><span class="params">(self)</span>:</span></div><div class="line">        print(<span class="string">"name is: %s, life is %d"</span> %(self.__name, self.life))</div><div class="line">p1 = Player(<span class="string">"Boss"</span>,<span class="number">100</span>)</div><div class="line">p1.print_role()</div><div class="line"></div><div class="line"><span class="comment"># result</span></div><div class="line">name <span class="keyword">is</span>: Boss, life <span class="keyword">is</span> <span class="number">100</span></div></pre></td></tr></table></figure>
<h4 id="10-_Inheritance">10. Inheritance</h4><figure class="highlight python"><table><tr><td class="code"><pre><div class="line"><span class="comment"># example</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Animal</span><span class="params">()</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name)</span>:</span></div><div class="line">        self.name = name</div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self)</span>:</span></div><div class="line">        print(<span class="string">"%s is running."</span> %(self.name))</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span><span class="params">(Animal)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name)</span>:</span></div><div class="line">        <span class="comment"># self.name = name</span></div><div class="line">        super().__init__(name)</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Cat</span><span class="params">(Animal)</span>:</span></div><div class="line">    <span class="keyword">pass</span></div><div class="line">t1 = Animal(<span class="string">"animal"</span>)</div><div class="line">print(t1.name)</div><div class="line">print(t1.run())</div><div class="line">t2 = Dog(<span class="string">"dog"</span>)</div><div class="line">print(t2.name)</div><div class="line">print(t2.run())</div><div class="line">t3 = Cat(<span class="string">"cat"</span>)</div><div class="line">print(t3.name)</div><div class="line">print(t3.run())</div><div class="line"></div><div class="line"><span class="comment"># result</span></div><div class="line">animal</div><div class="line">animal <span class="keyword">is</span> running.</div><div class="line">dog</div><div class="line">dog <span class="keyword">is</span> running.</div><div class="line">cat</div><div class="line">cat <span class="keyword">is</span> running.</div></pre></td></tr></table></figure>
<h4 id="11-_With_expression">11. With expression</h4><figure class="highlight python"><table><tr><td class="code"><pre><div class="line"><span class="comment"># example without exception</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Testwith</span><span class="params">()</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__enter__</span><span class="params">(self)</span>:</span></div><div class="line">        print(<span class="string">"run"</span>)</div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__exit__</span><span class="params">(self, exc_type, exc_val, exc_tb)</span>:</span></div><div class="line">        print(<span class="string">"exit"</span>)</div><div class="line"><span class="keyword">with</span> Testwith():</div><div class="line">    print(<span class="string">"Test is running"</span>)</div><div class="line"><span class="comment"># result</span></div><div class="line">run</div><div class="line">Test <span class="keyword">is</span> running</div><div class="line">exit</div><div class="line"></div><div class="line"><span class="comment"># example with exception</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Testwith</span><span class="params">()</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__enter__</span><span class="params">(self)</span>:</span></div><div class="line">        print(<span class="string">"run"</span>)</div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__exit__</span><span class="params">(self, exc_type, exc_val, exc_tb)</span>:</span></div><div class="line">        <span class="keyword">if</span> exc_tb <span class="keyword">is</span> <span class="keyword">None</span>:</div><div class="line">            print(<span class="string">"Normal exit"</span>)</div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            print(<span class="string">"exit with error: %s"</span> %exc_tb)</div><div class="line"><span class="keyword">with</span> Testwith():</div><div class="line">    print(<span class="string">"Test is running"</span>)</div><div class="line">    <span class="keyword">raise</span> NameError(<span class="string">"Test NameError"</span>)</div><div class="line"><span class="comment"># result</span></div><div class="line">run</div><div class="line">Test <span class="keyword">is</span> running</div><div class="line">exit <span class="keyword">with</span> error: &lt;traceback object at <span class="number">0x030830D0</span>&gt;</div><div class="line">Traceback (most recent call last):</div><div class="line">  File <span class="string">"hellopython.py"</span>, line <span class="number">108</span>, <span class="keyword">in</span> &lt;module&gt;</div><div class="line">    <span class="keyword">raise</span> NameError(<span class="string">"Test NameError"</span>)</div><div class="line">NameError: Test NameError</div></pre></td></tr></table></figure>
<h4 id="12-_Multi_Threads">12. Multi Threads</h4><figure class="highlight python"><table><tr><td class="code"><pre><div class="line"><span class="comment"># example while MainThread end first</span></div><div class="line"><span class="keyword">import</span> threading</div><div class="line"><span class="keyword">import</span> time</div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">myThread</span><span class="params">(arg1, arg2)</span>:</span></div><div class="line">    print(threading.current_thread().getName(), <span class="string">"start"</span>)</div><div class="line">    time.sleep(<span class="number">1</span>)</div><div class="line">    print(<span class="string">"%s %s"</span> %(arg1, arg1))</div><div class="line">    print(threading.current_thread().getName(), <span class="string">"stop"</span>)</div><div class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">6</span>,<span class="number">1</span>):</div><div class="line">    t1 = threading.Thread(target=myThread, args=(i, i+<span class="number">1</span>))</div><div class="line">    t1.start()</div><div class="line">print(threading.current_thread().getName(), <span class="string">"end"</span>)</div><div class="line"></div><div class="line"><span class="comment"># result</span></div><div class="line">Thread<span class="number">-1</span> start</div><div class="line">Thread<span class="number">-2</span> start</div><div class="line">Thread<span class="number">-3</span> start</div><div class="line">Thread<span class="number">-4</span> start</div><div class="line">Thread<span class="number">-5</span> start</div><div class="line">MainThread end</div><div class="line"><span class="number">3</span> <span class="number">3</span></div><div class="line">Thread<span class="number">-3</span> stop</div><div class="line"><span class="number">2</span> <span class="number">2</span></div><div class="line">Thread<span class="number">-2</span> stop</div><div class="line"><span class="number">1</span> <span class="number">1</span></div><div class="line">Thread<span class="number">-1</span> stop</div><div class="line"><span class="number">4</span> <span class="number">4</span></div><div class="line">Thread<span class="number">-4</span> stop</div><div class="line"><span class="number">5</span> <span class="number">5</span></div><div class="line">Thread<span class="number">-5</span> stop</div><div class="line"></div><div class="line"><span class="comment"># example while SubThread end first</span></div><div class="line"><span class="keyword">import</span> threading</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyThread</span><span class="params">(threading.Thread)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self)</span>:</span></div><div class="line">        print(threading.current_thread().getName(),<span class="string">"Start"</span>)</div><div class="line">        print(<span class="string">"Run"</span>)</div><div class="line">        print(threading.current_thread().getName(), <span class="string">"Stop"</span>)</div><div class="line">t1 = MyThread()</div><div class="line">t1.start()</div><div class="line">t1.join()</div><div class="line">print(threading.current_thread().getName(), <span class="string">"End"</span>)</div><div class="line"><span class="comment"># result</span></div><div class="line">Thread<span class="number">-1</span> Start</div><div class="line">Run</div><div class="line">Thread<span class="number">-1</span> Stop</div><div class="line">MainThread End</div></pre></td></tr></table></figure>
<h4 id="13-_Queue">13. Queue</h4><figure class="highlight python"><table><tr><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> queue</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>q = queue.Queue()</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>q.put(<span class="number">1</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>q.put(<span class="number">2</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>q.put(<span class="number">3</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>q.put(<span class="number">4</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>q.get()</div><div class="line"><span class="number">1</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>q.get()</div><div class="line"><span class="number">2</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>q.get()</div><div class="line"><span class="number">3</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>q.get()</div><div class="line"><span class="number">4</span></div></pre></td></tr></table></figure>
<h4 id="14-_Producer_&amp;_Consumer_problem">14. Producer &amp; Consumer problem</h4><figure class="highlight python"><table><tr><td class="code"><pre><div class="line"><span class="comment"># basic code</span></div><div class="line"><span class="keyword">from</span> threading <span class="keyword">import</span> Thread, current_thread</div><div class="line"><span class="keyword">import</span> time</div><div class="line"><span class="keyword">import</span> random</div><div class="line"><span class="keyword">from</span> queue <span class="keyword">import</span> Queue</div><div class="line">queue = Queue(<span class="number">5</span>)</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ProducerThread</span><span class="params">(Thread)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self)</span>:</span></div><div class="line">        name = current_thread().getName()</div><div class="line">        nums = range(<span class="number">100</span>)</div><div class="line">        <span class="keyword">global</span> queue</div><div class="line">        <span class="keyword">while</span> <span class="keyword">True</span>:</div><div class="line">            num = random.choice(nums)</div><div class="line">            queue.put(num)</div><div class="line">            print(<span class="string">"Producer %s produces %s data"</span> %(name, num))</div><div class="line">            t = random.randint(<span class="number">1</span>,<span class="number">3</span>)</div><div class="line">            time.sleep(t)</div><div class="line">            print(<span class="string">"Producer %s sleeps %s seconds"</span> %(name, t))</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ConsumerThread</span><span class="params">(Thread)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self)</span>:</span></div><div class="line">        name = current_thread().getName()</div><div class="line">        <span class="keyword">global</span> queue</div><div class="line">        <span class="keyword">while</span> <span class="keyword">True</span>:</div><div class="line">            num = queue.get()</div><div class="line">            queue.task_done()</div><div class="line">            print(<span class="string">"Consumer %s consumers %s data"</span> %(name, num))</div><div class="line">            t = random.randint(<span class="number">1</span>,<span class="number">5</span>)</div><div class="line">            time.sleep(t)</div><div class="line">            print(<span class="string">"Consumer %s sleeps %s seconds"</span> %(name, t))</div><div class="line"></div><div class="line"><span class="comment"># Consumer more than Producer</span></div><div class="line">p1 = ProducerThread(name=<span class="string">"p1"</span>)</div><div class="line">p1.start()</div><div class="line">c1 = ConsumerThread(name=<span class="string">"c1"</span>prop)</div><div class="line">c1.start()</div><div class="line">c2 = ConsumerThread(name=<span class="string">"c2"</span>)</div><div class="line">c2.start()</div><div class="line"><span class="comment"># result</span></div><div class="line">Producer p1 produces <span class="number">73</span> data</div><div class="line">Consumer c1 consumers <span class="number">73</span> data</div><div class="line">Producer p1 sleeps <span class="number">1</span> seconds</div><div class="line">Producer p1 produces <span class="number">51</span> data</div><div class="line">Consumer c2 consumers <span class="number">51</span> data</div><div class="line">Consumer c1 sleeps <span class="number">2</span> seconds</div><div class="line">Producer p1 sleeps <span class="number">3</span> seconds</div><div class="line">Producer p1 produces <span class="number">7</span> data</div><div class="line">Consumer c1 consumers <span class="number">7</span> data</div><div class="line">Consumer c1 sleeps <span class="number">1</span> seconds</div><div class="line">Producer p1 sleeps <span class="number">1</span> seconds</div><div class="line">Producer p1 produces <span class="number">30</span> data</div><div class="line">Consumer c1 consumers <span class="number">30</span> data</div><div class="line">Consumer c2 sleeps <span class="number">5</span> seconds</div><div class="line">Producer p1 sleeps <span class="number">1</span> seconds</div><div class="line"></div><div class="line"><span class="comment"># Producer more than Consumer</span></div><div class="line">p1 = ProducerThread(name=<span class="string">"p1"</span>)</div><div class="line">p1.start()</div><div class="line">p2 = ProducerThread(name=<span class="string">"p2"</span>)</div><div class="line">p2.start()</div><div class="line">p3 = ProducerThread(name=<span class="string">"p3"</span>)</div><div class="line">p3.start()</div><div class="line">c1 = ConsumerThread(name=<span class="string">"c1"</span>)</div><div class="line">c1.start()</div><div class="line">c2 = ConsumerThread(name=<span class="string">"c2"</span>)</div><div class="line">c2.start()</div><div class="line"><span class="comment">#result</span></div><div class="line">Producer p1 produces <span class="number">32</span> data</div><div class="line">Producer p2 produces <span class="number">4</span> data</div><div class="line">Producer p3 produces <span class="number">17</span> data</div><div class="line">Consumer c1 consumers <span class="number">32</span> data</div><div class="line">Consumer c2 consumers <span class="number">4</span> data</div><div class="line">Producer p1 sleeps <span class="number">2</span> seconds</div><div class="line">Producer p1 produces <span class="number">79</span> data</div><div class="line">Producer p2 sleeps <span class="number">2</span> seconds</div><div class="line">Producer p2 produces <span class="number">33</span> data</div><div class="line">Consumer c1 sleeps <span class="number">3</span> seconds</div><div class="line">Consumer c1 consumers <span class="number">17</span> data</div><div class="line">Producer p1 sleeps <span class="number">1</span> seconds</div><div class="line">Producer p3 sleeps <span class="number">3</span> seconds</div><div class="line">Producer p3 produces <span class="number">55</span> data</div><div class="line">Producer p1 produces <span class="number">1</span> data</div><div class="line">Consumer c2 sleeps <span class="number">4</span> seconds</div><div class="line">Consumer c2 consumers <span class="number">79</span> data</div><div class="line">Producer p2 sleeps <span class="number">3</span> seconds</div><div class="line">Producer p2 produces <span class="number">52</span> data</div><div class="line">Producer p3 sleeps <span class="number">2</span> seconds</div><div class="line">Producer p3 produces <span class="number">34</span> data</div></pre></td></tr></table></figure>
<h4 id="15-_Collect_Data_from_Website">15. Collect Data from Website</h4><figure class="highlight python"><table><tr><td class="code"><pre><div class="line"><span class="comment"># example 1</span></div><div class="line"><span class="keyword">from</span> urllib <span class="keyword">import</span> request</div><div class="line">url = <span class="string">"https://www.google.com/"</span></div><div class="line">res = request.urlopen(url, timeout=<span class="number">1</span>)</div><div class="line">print(res.read())</div><div class="line"></div><div class="line"><span class="comment"># example 2</span></div><div class="line"><span class="keyword">from</span> urllib <span class="keyword">import</span> request</div><div class="line"><span class="keyword">from</span> urllib <span class="keyword">import</span> parse</div><div class="line"><span class="comment"># get</span></div><div class="line">res1 = request.urlopen(<span class="string">"http://httpbin.org/get"</span>, timeout=<span class="number">1</span>)</div><div class="line">print(res1.read())</div><div class="line"><span class="comment"># post</span></div><div class="line">data = bytes(parse.urlencode(&#123;<span class="string">"world"</span>:<span class="string">"hello"</span>&#125;), encoding=<span class="string">"utf8"</span>)</div><div class="line">print(data)</div><div class="line">res2 = request.urlopen(<span class="string">"http://httpbin.org/post"</span>, data=data)</div><div class="line">print(res2.read().decode(<span class="string">"utf-8"</span>))</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Some knowledge hard to understand in Python.&lt;br&gt;
    
    </summary>
    
      <category term="Python" scheme="https://wing324.github.io/categories/Python/"/>
    
    
      <category term="Note" scheme="https://wing324.github.io/tags/Note/"/>
    
  </entry>
  
  <entry>
    <title>Yum install python3</title>
    <link href="https://wing324.github.io/2019/02/21/Yum-install-python3/"/>
    <id>https://wing324.github.io/2019/02/21/Yum-install-python3/</id>
    <published>2019-02-21T19:37:29.000Z</published>
    <updated>2019-02-21T22:17:25.526Z</updated>
    
    <content type="html"><![CDATA[<p>This is just a note for me to reuse in the future, this post just for CentOS 7.<br>Original resource from Chinese: <a href="https://blog.51cto.com/wenguonideshou/2083301" target="_blank" rel="external">click here.</a><br><a id="more"></a></p>
<ol>
<li><p>Install EPEL and IUS resource:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">yum install epel-release -y</div><div class="line">yum install https://centos7.iuscommunity.org/ius-release.rpm -y</div></pre></td></tr></table></figure>
</li>
<li><p>Install Python3.6</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">yum install python36u -y</div></pre></td></tr></table></figure>
</li>
<li><p>Create a soft link to python</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">ln -s /bin/python3.6 /bin/python3</div></pre></td></tr></table></figure>
<p>Be careful, you can’t link /bin/python3  to /bin/python, yum should use python2, it can’t use python3.</p>
</li>
<li><p>Of cause, we always use pip3 for python3, so we also need to install pip3.6(the same version with Python3.6)</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">yum install python36u-pip -y</div></pre></td></tr></table></figure>
</li>
<li><p>Create a soft link from pip3.6 to pip</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">ln -s /bin/pip3.6 /bin/pip3</div></pre></td></tr></table></figure>
</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;This is just a note for me to reuse in the future, this post just for CentOS 7.&lt;br&gt;Original resource from Chinese: &lt;a href=&quot;https://blog.51cto.com/wenguonideshou/2083301&quot;&gt;click here.&lt;/a&gt;&lt;br&gt;
    
    </summary>
    
      <category term="Linux" scheme="https://wing324.github.io/categories/Linux/"/>
    
    
      <category term="yum" scheme="https://wing324.github.io/tags/yum/"/>
    
  </entry>
  
  <entry>
    <title>CSS组合器</title>
    <link href="https://wing324.github.io/2018/11/08/CSS%E7%BB%84%E5%90%88%E5%99%A8/"/>
    <id>https://wing324.github.io/2018/11/08/CSS组合器/</id>
    <published>2018-11-09T00:49:22.000Z</published>
    <updated>2019-05-28T05:19:54.277Z</updated>
    
    <content type="html"><![CDATA[<p>CSS的几种组合选择器总是让我非常的迷糊，所以自己把别人总结的保存一下。</p>
<a id="more"></a>
<p>文章来源：<a href="https://developer.mozilla.org/zh-CN/docs/Learn/CSS/Introduction_to_CSS/Combinators_and_multiple_selectors" target="_blank" rel="external">https://developer.mozilla.org/zh-CN/docs/Learn/CSS/Introduction_to_CSS/Combinators_and_multiple_selectors</a></p>
<table>
<thead>
<tr>
<th>名称</th>
<th>组合器</th>
<th>选择</th>
</tr>
</thead>
<tbody>
<tr>
<td></td>
<td>A,B</td>
<td>匹配满足A（和/或）B的任意元素（参见下方 <a href="https://developer.mozilla.org/zh-CN/docs/Learn/CSS/Introduction_to_CSS/Combinators_and_multiple_selectors#%E5%90%8C%E4%B8%80%E8%A7%84%E5%88%99%E9%9B%86%E4%B8%8A%E7%9A%84%E5%A4%9A%E4%B8%AA%E9%80%89%E6%8B%A9%E5%99%A8" target="_blank" rel="external">同一规则集上的多个选择器</a>）.</td>
</tr>
<tr>
<td>后代选择器</td>
<td>A B</td>
<td>匹配B元素，满足条件：B是A的后代结点（B是A的子节点，或者A的子节点的子节点）</td>
</tr>
<tr>
<td>子选择器</td>
<td>A &gt; B</td>
<td>匹配B元素，满足条件：B是A的直接子节点</td>
</tr>
<tr>
<td>相邻兄弟选择器</td>
<td>A + B</td>
<td>匹配B元素，满足条件：B是A的下一个兄弟节点（AB有相同的父结点，并且B紧跟在A的后面）</td>
</tr>
<tr>
<td>通用兄弟选择器</td>
<td>A ~ B</td>
<td>匹配B元素，满足条件：B是A之后的兄弟节点中的任意一个（AB有相同的父节点，B在A之后，但不一定是紧挨着A）</td>
</tr>
</tbody>
</table>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;CSS的几种组合选择器总是让我非常的迷糊，所以自己把别人总结的保存一下。&lt;/p&gt;
    
    </summary>
    
      <category term="Front End" scheme="https://wing324.github.io/categories/Front-End/"/>
    
    
      <category term="CSS" scheme="https://wing324.github.io/tags/CSS/"/>
    
  </entry>
  
  <entry>
    <title>CSS常用选择器</title>
    <link href="https://wing324.github.io/2018/10/30/CSS%E5%B8%B8%E7%94%A8%E9%80%89%E6%8B%A9%E5%99%A8/"/>
    <id>https://wing324.github.io/2018/10/30/CSS常用选择器/</id>
    <published>2018-10-30T23:54:32.000Z</published>
    <updated>2018-11-09T00:53:02.347Z</updated>
    
    <content type="html"><![CDATA[<p>CSS的几种选择器总是让我非常的迷糊，所以我把别人总结的拿来保存一下。</p>
<a id="more"></a>
<p>文章来源：<a href="https://developer.mozilla.org/zh-CN/docs/Learn/Getting_started_with_the_web/CSS_basics" target="_blank" rel="external">https://developer.mozilla.org/zh-CN/docs/Learn/Getting_started_with_the_web/CSS_basics</a></p>
<table>
<thead>
<tr>
<th>选择器名称</th>
<th>选择的内容</th>
<th>示例</th>
</tr>
</thead>
<tbody>
<tr>
<td>元素选择器（有时也称作标签或类型选择器）</td>
<td>所有指定类型的 HTML 元素</td>
<td><code>p</code><br>选择 <code>&lt;p&gt;</code></td>
</tr>
<tr>
<td>标识（ID）选择器</td>
<td>页面中指定标识的元素（在一个 HTML 页面中，每个标识只被允许指定到一个元素）</td>
<td><code>#my-id</code><br>选择 <code>&lt;p id=&quot;my-id&quot;&gt;</code> 或 <code>&lt;a id=&quot;my-id&quot;&gt;</code></td>
</tr>
<tr>
<td>类别选择器</td>
<td>页面中指定类别的元素（一个页面中可以出现多个类别实例）</td>
<td><code>.my-class</code><br>选择 <code>&lt;p class=&quot;my-class&quot;&gt;</code> 和 <code>&lt;a class=&quot;my-class&quot;&gt;</code></td>
</tr>
<tr>
<td>属性选择器</td>
<td>页面中拥有指定属性的元素</td>
<td><code>img[src]</code><br>选择 <code>&lt;img src=&quot;myimage.png&quot;&gt;</code> 而不是 <code>&lt;img&gt;</code></td>
</tr>
<tr>
<td>伪类选择器</td>
<td>指定的元素，但是需要在特殊的状态，比如悬停</td>
<td><code>a:hover</code><br>选择 <code>&lt;a&gt;</code>, 但是只在鼠标悬停在链接上时</td>
</tr>
</tbody>
</table>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;CSS的几种选择器总是让我非常的迷糊，所以我把别人总结的拿来保存一下。&lt;/p&gt;
    
    </summary>
    
      <category term="Front End" scheme="https://wing324.github.io/categories/Front-End/"/>
    
    
      <category term="CSS" scheme="https://wing324.github.io/tags/CSS/"/>
    
  </entry>
  
  <entry>
    <title>SHOW PROCESSLIST和SHOW PROFILE的Status整理（英文官方文档版）</title>
    <link href="https://wing324.github.io/2018/04/02/SHOW-PROCESSLIST%E5%92%8CSHOW-PROFILE%E7%9A%84Status%E6%95%B4%E7%90%86%EF%BC%88%E8%8B%B1%E6%96%87%E5%AE%98%E6%96%B9%E6%96%87%E6%A1%A3%E7%89%88%EF%BC%89/"/>
    <id>https://wing324.github.io/2018/04/02/SHOW-PROCESSLIST和SHOW-PROFILE的Status整理（英文官方文档版）/</id>
    <published>2018-04-03T03:24:59.112Z</published>
    <updated>2017-03-01T07:01:48.000Z</updated>
    
    <content type="html"><![CDATA[<p>MySQL官方文档中的status存在于好几个小节中，每个status的英文解释其实一般是可以看的懂的，主要是寻找相应的status有点困难，所以我将所有的status整理在一个页面，直接Ctrl+F就可以查找到相应的status啦。<br><a id="more"></a></p>
<h2 id="Thread_Command">Thread Command</h2><p>A thread can have any of the following Command values:  </p>
<h5 id="Binlog_Dump">Binlog Dump</h5><p>This is a thread on a master server for sending binary log contents to a slave server.</p>
<h5 id="Change_user">Change user</h5><p>The thread is executing a change-user operation.</p>
<h5 id="Close_stmt">Close stmt</h5><p>The thread is closing a prepared statement.</p>
<h5 id="Connect">Connect</h5><p>A replication slave is connected to its master.</p>
<h5 id="Connect_Out">Connect Out</h5><p>A replication slave is connecting to its master.</p>
<h5 id="Create_DB">Create DB</h5><p>The thread is executing a create-database operation.</p>
<h5 id="Daemon">Daemon</h5><p>This thread is internal to the server, not a thread that services a client connection.</p>
<h5 id="Debug">Debug</h5><p>The thread is generating debugging information.</p>
<h5 id="Delayed_insert">Delayed insert</h5><p>The thread is a delayed-insert handler.</p>
<h5 id="Drop_DB">Drop DB</h5><p>The thread is executing a drop-database operation.</p>
<h5 id="Error">Error</h5><h5 id="Execute">Execute</h5><p>The thread is executing a prepared statement.</p>
<h5 id="Fetch">Fetch</h5><p>The thread is fetching the results from executing a prepared statement.</p>
<h5 id="Field_List">Field List</h5><p>The thread is retrieving information for table columns.</p>
<h5 id="Init_DB">Init DB</h5><p>The thread is selecting a default database.</p>
<h5 id="Kill">Kill</h5><p>The thread is killing another thread.</p>
<h5 id="Long_Data">Long Data</h5><p>The thread is retrieving long data in the result of executing a prepared statement.</p>
<h5 id="Ping">Ping</h5><p>The thread is handling a server-ping request.</p>
<h5 id="Prepare">Prepare</h5><p>The thread is preparing a prepared statement.</p>
<h5 id="Processlist">Processlist</h5><p>The thread is producing information about server threads.</p>
<h5 id="Query">Query</h5><p>The thread is executing a statement.</p>
<h5 id="Quit">Quit</h5><p>The thread is terminating.</p>
<h5 id="Refresh">Refresh</h5><p>The thread is flushing table, logs, or caches, or resetting status variable or replication server information.</p>
<h5 id="Register_Slave">Register Slave</h5><p>The thread is registering a slave server.</p>
<h5 id="Reset_stmt">Reset stmt</h5><p>The thread is resetting a prepared statement.</p>
<h5 id="Set_option">Set option</h5><p>The thread is setting or resetting a client statement-execution option.</p>
<h5 id="Shutdown">Shutdown</h5><p>The thread is shutting down the server.</p>
<h5 id="Sleep">Sleep</h5><p>The thread is waiting for the client to send a new statement to it.</p>
<h5 id="Statistics">Statistics</h5><p>The thread is producing server-status information.</p>
<h5 id="Table_Dump">Table Dump</h5><p>The thread is sending table contents to a slave server.</p>
<h5 id="Time">Time</h5><p>Unused.</p>
<h2 id="General_Thread">General Thread</h2><p>The following list describes thread State values that are associated with general query processing and not more specialized activities such as replication. Many of these are useful only for finding bugs in the server.  </p>
<h5 id="After_create">After create</h5><p>This occurs when the thread creates a table (including internal temporary tables), at the end of the function that creates the table. This state is used even if the table could not be created due to some error.</p>
<h5 id="altering_table">altering table</h5><p>The server is in the process of executing an in-place ALTER TABLE.</p>
<h5 id="Analyzing">Analyzing</h5><p>The thread is calculating a MyISAM table key distributions (for example, for ANALYZE TABLE).</p>
<h5 id="checking_permissions">checking permissions</h5><p>The thread is checking whether the server has the required privileges to execute the statement.</p>
<h5 id="Checking_table">Checking table</h5><p>The thread is performing a table check operation.</p>
<h5 id="cleaning_up">cleaning up</h5><p>The thread has processed one command and is preparing to free memory and reset certain state variables.</p>
<h5 id="closing_tables">closing tables</h5><p>The thread is flushing the changed table data to disk and closing the used tables. This should be a fast operation. If not, verify that you do not have a full disk and that the disk is not in very heavy use.</p>
<h5 id="committing_alter_table_to_storage_engine">committing alter table to storage engine</h5><p>The server has finished an in-place ALTER TABLE and is committing the result.</p>
<h5 id="converting_HEAP_to_MyISAM">converting HEAP to MyISAM</h5><p>The thread is converting an internal temporary table from a MEMORY table to an on-disk MyISAM table.</p>
<h5 id="copy_to_tmp_table">copy to tmp table</h5><p>The thread is processing an ALTER TABLE statement. This state occurs after the table with the new structure has been created but before rows are copied into it.</p>
<h5 id="Copying_to_group_table">Copying to group table</h5><p>If a statement has different ORDER BY and GROUP BY criteria, the rows are sorted by group and copied to a temporary table.</p>
<h5 id="Copying_to_tmp_table">Copying to tmp table</h5><p>The server is copying to a temporary table in memory.</p>
<h5 id="Copying_to_tmp_table_on_disk">Copying to tmp table on disk</h5><p>The server is copying to a temporary table on disk. The temporary result set has become too large (see Section 8.4.4, “Internal Temporary Table Use in MySQL”). Consequently, the thread is changing the temporary table from in-memory to disk-based format to save memory.</p>
<h5 id="Creating_index">Creating index</h5><p>The thread is processing ALTER TABLE … ENABLE KEYS for a MyISAM table.</p>
<h5 id="Creating_sort_index">Creating sort index</h5><p>The thread is processing a SELECT that is resolved using an internal temporary table.</p>
<h5 id="creating_table">creating table</h5><p>The thread is creating a table. This includes creation of temporary tables.</p>
<h5 id="Creating_tmp_table">Creating tmp table</h5><p>The thread is creating a temporary table in memory or on disk. If the table is created in memory but later is converted to an on-disk table, the state during that operation will be Copying to tmp table on disk.</p>
<h5 id="deleting_from_main_table">deleting from main table</h5><p>The server is executing the first part of a multiple-table delete. It is deleting only from the first table, and saving columns and offsets to be used for deleting from the other (reference) tables.</p>
<h5 id="deleting_from_reference_tables">deleting from reference tables</h5><p>The server is executing the second part of a multiple-table delete and deleting the matched rows from the other tables.</p>
<h5 id="discard_or_import_tablespace">discard_or_import_tablespace</h5><p>The thread is processing an ALTER TABLE … DISCARD TABLESPACE or ALTER TABLE … IMPORT TABLESPACE statement.</p>
<h5 id="end">end</h5><p>This occurs at the end but before the cleanup of ALTER TABLE, CREATE VIEW, DELETE, INSERT, SELECT, or UPDATE statements.</p>
<h5 id="executing">executing</h5><p>The thread has begun executing a statement.</p>
<h5 id="Execution_of_init_command">Execution of init_command</h5><p>The thread is executing statements in the value of the init_command system variable.</p>
<h5 id="freeing_items">freeing items</h5><p>The thread has executed a command. Some freeing of items done during this state involves the query cache. This state is usually followed by cleaning up.</p>
<h5 id="Flushing_tables">Flushing tables</h5><p>The thread is executing FLUSH TABLES and is waiting for all threads to close their tables.</p>
<h5 id="FULLTEXT_initialization">FULLTEXT initialization</h5><p>The server is preparing to perform a natural-language full-text search.</p>
<h5 id="init">init</h5><p>This occurs before the initialization of ALTER TABLE, DELETE, INSERT, SELECT, or UPDATE statements. Actions taken by the server in this state include flushing the binary log, the InnoDB log, and some query cache cleanup operations.<br>For the end state, the following operations could be happening:<br>    Removing query cache entries after data in a table is changed<br>    Writing an event to the binary log<br>    Freeing memory buffers, including for blobs</p>
<h5 id="Killed">Killed</h5><p>Someone has sent a KILL statement to the thread and it should abort next time it checks the kill flag. The flag is checked in each major loop in MySQL, but in some cases it might still take a short time for the thread to die. If the thread is locked by some other thread, the kill takes effect as soon as the other thread releases its lock.</p>
<h5 id="logging_slow_query">logging slow query</h5><p>The thread is writing a statement to the slow-query log.</p>
<h5 id="NULL">NULL</h5><p>This state is used for the SHOW PROCESSLIST state.</p>
<h5 id="login">login</h5><p>The initial state for a connection thread until the client has been authenticated successfully.</p>
<h5 id="manage_keys">manage keys</h5><p>The server is enabling or disabling a table index.</p>
<h5 id="Opening_tables,_Opening_table">Opening tables, Opening table</h5><p>The thread is trying to open a table. This is should be very fast procedure, unless something prevents opening. For example, an ALTER TABLE or a LOCK TABLE statement can prevent opening a table until the statement is finished. It is also worth checking that your table_open_cache value is large enough.</p>
<h5 id="optimizing">optimizing</h5><p>The server is performing initial optimizations for a query.</p>
<h5 id="preparing">preparing</h5><p>This state occurs during query optimization.</p>
<h5 id="preparing_for_alter_table">preparing for alter table</h5><p>The server is preparing to execute an in-place ALTER TABLE.</p>
<h5 id="Purging_old_relay_logs">Purging old relay logs</h5><p>The thread is removing unneeded relay log files.</p>
<h5 id="query_end">query end</h5><p>This state occurs after processing a query but before the freeing items state.</p>
<h5 id="Reading_from_net">Reading from net</h5><p>The server is reading a packet from the network.</p>
<h5 id="Removing_duplicates">Removing duplicates</h5><p>The query was using SELECT DISTINCT in such a way that MySQL could not optimize away the distinct operation at an early stage. Because of this, MySQL requires an extra stage to remove all duplicated rows before sending the result to the client.</p>
<h5 id="removing_tmp_table">removing tmp table</h5><p>The thread is removing an internal temporary table after processing a SELECT statement. This state is not used if no temporary table was created.</p>
<h5 id="rename">rename</h5><p>The thread is renaming a table.</p>
<h5 id="rename_result_table">rename result table</h5><p>The thread is processing an ALTER TABLE statement, has created the new table, and is renaming it to replace the original table.</p>
<h5 id="Reopen_tables">Reopen tables</h5><p>The thread got a lock for the table, but noticed after getting the lock that the underlying table structure changed. It has freed the lock, closed the table, and is trying to reopen it.</p>
<h5 id="Repair_by_sorting">Repair by sorting</h5><p>The repair code is using a sort to create indexes.</p>
<h5 id="Repair_done">Repair done</h5><p>The thread has completed a multi-threaded repair for a MyISAM table.</p>
<h5 id="Repair_with_keycache">Repair with keycache</h5><p>The repair code is using creating keys one by one through the key cache. This is much slower than Repair by sorting.</p>
<h5 id="Rolling_back">Rolling back</h5><p>The thread is rolling back a transaction.</p>
<h5 id="Saving_state">Saving state</h5><p>For MyISAM table operations such as repair or analysis, the thread is saving the new table state to the .MYI file header. State includes information such as number of rows, the AUTO_INCREMENT counter, and key distributions.</p>
<h5 id="Searching_rows_for_update">Searching rows for update</h5><p>The thread is doing a first phase to find all matching rows before updating them. This has to be done if the UPDATE is changing the index that is used to find the involved rows.</p>
<h5 id="Sending_data">Sending data</h5><p>The thread is reading and processing rows for a SELECT statement, and sending data to the client. Because operations occurring during this state tend to perform large amounts of disk access (reads), it is often the longest-running state over the lifetime of a given query.</p>
<h5 id="setup">setup</h5><p>The thread is beginning an ALTER TABLE operation.</p>
<h5 id="Sorting_for_group">Sorting for group</h5><p>The thread is doing a sort to satisfy a GROUP BY.</p>
<h5 id="Sorting_for_order">Sorting for order</h5><p>The thread is doing a sort to satisfy a ORDER BY.</p>
<h5 id="Sorting_index">Sorting index</h5><p>The thread is sorting index pages for more efficient access during a MyISAM table optimization operation.</p>
<h5 id="Sorting_result">Sorting result</h5><p>For a SELECT statement, this is similar to Creating sort index, but for nontemporary tables.</p>
<h5 id="statistics">statistics</h5><p>The server is calculating statistics to develop a query execution plan. If a thread is in this state for a long time, the server is probably disk-bound performing other work.</p>
<h5 id="System_lock">System lock</h5><p>The thread is going to request or is waiting for an internal or external system lock for the table. If this state is being caused by requests for external locks and you are not using multiple mysqld servers that are accessing the same MyISAM tables, you can disable external system locks with the –skip-external-locking option. However, external locking is disabled by default, so it is likely that this option will have no effect. For SHOW PROFILE, this state means the thread is requesting the lock (not waiting for it).</p>
<h5 id="update">update</h5><p>The thread is getting ready to start updating the table.</p>
<h5 id="Updating">Updating</h5><p>The thread is searching for rows to update and is updating them.</p>
<h5 id="updating_main_table">updating main table</h5><p>The server is executing the first part of a multiple-table update. It is updating only the first table, and saving columns and offsets to be used for updating the other (reference) tables.</p>
<h5 id="updating_reference_tables">updating reference tables</h5><p>The server is executing the second part of a multiple-table update and updating the matched rows from the other tables.</p>
<h5 id="User_lock">User lock</h5><p>The thread is going to request or is waiting for an advisory lock requested with a GET_LOCK() call. For SHOW PROFILE, this state means the thread is requesting the lock (not waiting for it).</p>
<h5 id="User_sleep">User sleep</h5><p>The thread has invoked a SLEEP() call.</p>
<h5 id="Waiting_for_commit_lock">Waiting for commit lock</h5><p>FLUSH TABLES WITH READ LOCK is waiting for a commit lock.</p>
<h5 id="Waiting_for_global_read_lock">Waiting for global read lock</h5><p>FLUSH TABLES WITH READ LOCK is waiting for a global read lock or the global read_only system variable is being set.</p>
<h5 id="Waiting_for_tables,_Waiting_for_table_flush">Waiting for tables, Waiting for table flush</h5><p>The thread got a notification that the underlying structure for a table has changed and it needs to reopen the table to get the new structure. However, to reopen the table, it must wait until all other threads have closed the table in question.<br>This notification takes place if another thread has used FLUSH TABLES or one of the following statements on the table in question: FLUSH TABLES tbl_name, ALTER TABLE, RENAME TABLE, REPAIR TABLE, ANALYZE TABLE, or OPTIMIZE TABLE.  </p>
<h5 id="Waiting_for_lock_type_lock">Waiting for lock_type lock</h5><p>The server is waiting to acquire a lock, where lock_type indicates the type of lock:</p>
<pre><code>Waiting for event metadata <span class="operator"><span class="keyword">lock</span>

Waiting <span class="keyword">for</span> <span class="keyword">global</span> <span class="keyword">read</span> <span class="keyword">lock</span>

Waiting <span class="keyword">for</span> <span class="keyword">schema</span> metadata <span class="keyword">lock</span>

Waiting <span class="keyword">for</span> <span class="keyword">stored</span> <span class="keyword">function</span> metadata <span class="keyword">lock</span>

Waiting <span class="keyword">for</span> <span class="keyword">stored</span> <span class="keyword">procedure</span> metadata <span class="keyword">lock</span>

Waiting <span class="keyword">for</span> <span class="keyword">table</span> <span class="keyword">level</span> <span class="keyword">lock</span>

Waiting <span class="keyword">for</span> <span class="keyword">table</span> metadata <span class="keyword">lock</span>

Waiting <span class="keyword">for</span> <span class="keyword">trigger</span> metadata <span class="keyword">lock</span></span>
</code></pre><h5 id="Waiting_on_cond">Waiting on cond</h5><p>A generic state in which the thread is waiting for a condition to become true. No specific state information is available.</p>
<h5 id="Writing_to_net">Writing to net</h5><p>The server is writing a packet to the network.</p>
<h2 id="Delayed-Insert_Thread">Delayed-Insert Thread</h2><p>These thread states are associated with processing for DELAYED inserts (see Section 13.2.5.2, “INSERT DELAYED Syntax”). Some states are associated with connection threads that process INSERT DELAYED statements from clients. Other states are associated with delayed-insert handler threads that insert the rows. There is a delayed-insert handler thread for each table for which INSERT DELAYED statements are issued.<br>States associated with a connection thread that processes an INSERT DELAYED statement from the client:  </p>
<h5 id="allocating_local_table">allocating local table</h5><p>The thread is preparing to feed rows to the delayed-insert handler thread.</p>
<h5 id="Creating_delayed_handler">Creating delayed handler</h5><p>The thread is creating a handler for DELAYED inserts.</p>
<h5 id="got_handler_lock">got handler lock</h5><p>This occurs before the allocating local table state and after the waiting for handler lock state, when the connection thread gets access to the delayed-insert handler thread.</p>
<h5 id="got_old_table">got old table</h5><p>This occurs after the waiting for handler open state. The delayed-insert handler thread has signaled that it has ended its initialization phase, which includes opening the table for delayed inserts.</p>
<h5 id="storing_row_into_queue">storing row into queue</h5><p>The thread is adding a new row to the list of rows that the delayed-insert handler thread must insert.</p>
<h5 id="waiting_for_delay_list">waiting for delay_list</h5><p>This occurs during the initialization phase when the thread is trying to find the delayed-insert handler thread for the table, and before attempting to gain access to the list of delayed-insert threads.</p>
<h5 id="waiting_for_handler_insert">waiting for handler insert</h5><p>An INSERT DELAYED handler has processed all pending inserts and is waiting for new ones.</p>
<h5 id="waiting_for_handler_lock">waiting for handler lock</h5><p>This occurs before the allocating local table state when the connection thread waits for access to the delayed-insert handler thread.</p>
<h5 id="waiting_for_handler_open">waiting for handler open</h5><p>This occurs after the Creating delayed handler state and before the got old table state. The delayed-insert handler thread has just been started, and the connection thread is waiting for it to initialize.<br>States associated with a delayed-insert handler thread that inserts the rows:  </p>
<h5 id="insert">insert</h5><p>The state that occurs just before inserting rows into the table.</p>
<h5 id="reschedule">reschedule</h5><p>After inserting a number of rows, the delayed-insert thread sleeps to let other threads do work.</p>
<h5 id="upgrading_lock">upgrading lock</h5><p>A delayed-insert handler is trying to get a lock for the table to insert rows.</p>
<h5 id="Waiting_for_INSERT">Waiting for INSERT</h5><p>A delayed-insert handler is waiting for a connection thread to add rows to the queue (see storing row into queue).</p>
<h2 id="Query_Cache_Thread">Query Cache Thread</h2><p>These thread states are associated with the query cache (see Section 8.10.3, “The MySQL Query Cache”).  </p>
<h5 id="checking_privileges_on_cached_query">checking privileges on cached query</h5><p>The server is checking whether the user has privileges to access a cached query result.</p>
<h5 id="checking_query_cache_for_query">checking query cache for query</h5><p>The server is checking whether the current query is present in the query cache.</p>
<h5 id="invalidating_query_cache_entries">invalidating query cache entries</h5><p>Query cache entries are being marked invalid because the underlying tables have changed.</p>
<h5 id="sending_cached_result_to_client">sending cached result to client</h5><p>The server is taking the result of a query from the query cache and sending it to the client.</p>
<h5 id="storing_result_in_query_cache">storing result in query cache</h5><p>The server is storing the result of a query in the query cache.</p>
<h5 id="Waiting_for_query_cache_lock">Waiting for query cache lock</h5><p>This state occurs while a session is waiting to take the query cache lock. This can happen for any statement that needs to perform some query cache operation, such as an INSERT or DELETE that invalidates the query cache, a SELECT that looks for a cached entry, RESET QUERY CACHE, and so forth.</p>
<h2 id="Replication_Master_Thread">Replication Master Thread</h2><p>The following list shows the most common states you may see in the State column for the master’s Binlog Dump thread. If you see no Binlog Dump threads on a master server, this means that replication is not running—that is, that no slaves are currently connected.  </p>
<h5 id="Sending_binlog_event_to_slave">Sending binlog event to slave</h5><p>Binary logs consist of events, where an event is usually an update plus some other information. The thread has read an event from the binary log and is now sending it to the slave.</p>
<h5 id="Finished_reading_one_binlog;_switching_to_next_binlog">Finished reading one binlog; switching to next binlog</h5><p>The thread has finished reading a binary log file and is opening the next one to send to the slave.</p>
<h5 id="Master_has_sent_all_binlog_to_slave;_waiting_for_binlog_to_be_updated">Master has sent all binlog to slave; waiting for binlog to be updated</h5><p>The thread has read all outstanding updates from the binary logs and sent them to the slave. The thread is now idle, waiting for new events to appear in the binary log resulting from new updates occurring on the master.</p>
<h5 id="Waiting_to_finalize_termination">Waiting to finalize termination</h5><p>A very brief state that occurs as the thread is stopping.</p>
<h2 id="Replication_Slave_I/O_Thread">Replication Slave I/O Thread</h2><p>The following list shows the most common states you see in the State column for a slave server I/O thread. This state also appears in the Slave_IO_State column displayed by SHOW SLAVE STATUS, so you can get a good view of what is happening by using that statement.  </p>
<h5 id="Waiting_for_master_update">Waiting for master update</h5><p>The initial state before Connecting to master.</p>
<h5 id="Connecting_to_master">Connecting to master</h5><p>The thread is attempting to connect to the master.</p>
<h5 id="Checking_master_version">Checking master version</h5><p>A state that occurs very briefly, after the connection to the master is established.</p>
<h5 id="Registering_slave_on_master">Registering slave on master</h5><p>A state that occurs very briefly after the connection to the master is established.</p>
<h5 id="Requesting_binlog_dump">Requesting binlog dump</h5><p>A state that occurs very briefly, after the connection to the master is established. The thread sends to the master a request for the contents of its binary logs, starting from the requested binary log file name and position.</p>
<h5 id="Waiting_to_reconnect_after_a_failed_binlog_dump_request">Waiting to reconnect after a failed binlog dump request</h5><p>If the binary log dump request failed (due to disconnection), the thread goes into this state while it sleeps, then tries to reconnect periodically. The interval between retries can be specified using the CHANGE MASTER TO statement.</p>
<h5 id="Reconnecting_after_a_failed_binlog_dump_request">Reconnecting after a failed binlog dump request</h5><p>The thread is trying to reconnect to the master.</p>
<h5 id="Waiting_for_master_to_send_event">Waiting for master to send event</h5><p>The thread has connected to the master and is waiting for binary log events to arrive. This can last for a long time if the master is idle. If the wait lasts for slave_net_timeout seconds, a timeout occurs. At that point, the thread considers the connection to be broken and makes an attempt to reconnect.</p>
<h5 id="Queueing_master_event_to_the_relay_log">Queueing master event to the relay log</h5><p>The thread has read an event and is copying it to the relay log so that the SQL thread can process it.</p>
<h5 id="Waiting_to_reconnect_after_a_failed_master_event_read">Waiting to reconnect after a failed master event read</h5><p>An error occurred while reading (due to disconnection). The thread is sleeping for the number of seconds set by the CHANGE MASTER TO statement (default 60) before attempting to reconnect.</p>
<h5 id="Reconnecting_after_a_failed_master_event_read">Reconnecting after a failed master event read</h5><p>The thread is trying to reconnect to the master. When connection is established again, the state becomes Waiting for master to send event.</p>
<h5 id="Waiting_for_the_slave_SQL_thread_to_free_enough_relay_log_space">Waiting for the slave SQL thread to free enough relay log space</h5><p>You are using a nonzero relay_log_space_limit value, and the relay logs have grown large enough that their combined size exceeds this value. The I/O thread is waiting until the SQL thread frees enough space by processing relay log contents so that it can delete some relay log files.</p>
<h5 id="Waiting_for_slave_mutex_on_exit">Waiting for slave mutex on exit</h5><p>A state that occurs briefly as the thread is stopping.</p>
<h2 id="Replication_Slave_SQL_Thread">Replication Slave SQL Thread</h2><p>The following list shows the most common states you may see in the State column for a slave server SQL thread:  </p>
<h5 id="Waiting_for_the_next_event_in_relay_log">Waiting for the next event in relay log</h5><p>The initial state before Reading event from the relay log.</p>
<h5 id="Reading_event_from_the_relay_log">Reading event from the relay log</h5><p>The thread has read an event from the relay log so that the event can be processed.</p>
<h5 id="Making_temporary_file_(append)_before_replaying_LOAD_DATA_INFILE">Making temporary file (append) before replaying LOAD DATA INFILE</h5><p>The thread is executing a LOAD DATA INFILE statement and is appending the data to a temporary file containing the data from which the slave will read rows.</p>
<h5 id="Making_temporary_file_(create)_before_replaying_LOAD_DATA_INFILE">Making temporary file (create) before replaying LOAD DATA INFILE</h5><p>The thread is executing a LOAD DATA INFILE statement and is creating a temporary file containing the data from which the slave will read rows. This state can only be encountered if the original LOAD DATA INFILE statement was logged by a master running a version of MySQL earlier than version 5.0.3.</p>
<h5 id="Slave_has_read_all_relay_log;_waiting_for_more_updates">Slave has read all relay log; waiting for more updates</h5><p>The thread has processed all events in the relay log files, and is now waiting for the I/O thread to write new events to the relay log.</p>
<h5 id="Waiting_for_slave_mutex_on_exit-1">Waiting for slave mutex on exit</h5><p>A very brief state that occurs as the thread is stopping.</p>
<h5 id="Waiting_until_MASTER_DELAY_seconds_after_master_executed_event">Waiting until MASTER_DELAY seconds after master executed event</h5><p>The SQL thread has read an event but is waiting for the slave delay to lapse. This delay is set with the MASTER_DELAY option of CHANGE MASTER TO.</p>
<h5 id="Killing_slave">Killing slave</h5><p>The thread is processing a STOP SLAVE statement.</p>
<h5 id="Waiting_for_an_event_from_Coordinator">Waiting for an event from Coordinator</h5><p>Using the multi-threaded slave (slave_parallel_workers is greater than 1), one of the slave worker threads is waiting for an event from the coordinator thread.  </p>
<p>The Info column for the SQL thread may also show the text of a statement. This indicates that the thread has read an event from the relay log, extracted the statement from it, and may be executing it.  </p>
<h2 id="Replication_Slave_Connection_Thread">Replication Slave Connection Thread</h2><p>These thread states occur on a replication slave but are associated with connection threads, not with the I/O or SQL threads.  </p>
<h5 id="Changing_master">Changing master</h5><p>The thread is processing a CHANGE MASTER TO statement.</p>
<h5 id="Killing_slave-1">Killing slave</h5><p>The thread is processing a STOP SLAVE statement.</p>
<h5 id="Opening_master_dump_table">Opening master dump table</h5><p>This state occurs after Creating table from master dump.</p>
<h5 id="Reading_master_dump_table_data">Reading master dump table data</h5><p>This state occurs after Opening master dump table.</p>
<h5 id="Rebuilding_the_index_on_master_dump_table">Rebuilding the index on master dump table</h5><p>This state occurs after Reading master dump table data.</p>
<h2 id="MySQL_Cluster_Thread">MySQL Cluster Thread</h2><h5 id="Committing_events_to_binlog">Committing events to binlog</h5><h5 id="Opening_mysql-ndb_apply_status">Opening mysql.ndb_apply_status</h5><h5 id="Processing_events">Processing events</h5><p>The thread is processing events for binary logging.</p>
<h5 id="Processing_events_from_schema_table">Processing events from schema table</h5><p>The thread is doing the work of schema replication.</p>
<h5 id="Shutting_down">Shutting down</h5><h5 id="Syncing_ndb_table_schema_operation_and_binlog">Syncing ndb table schema operation and binlog</h5><p>This is used to have a correct binary log of schema operations for NDB.</p>
<h5 id="Waiting_for_event_from_ndbcluster">Waiting for event from ndbcluster</h5><p>The server is acting as an SQL node in a MySQL Cluster, and is connected to a cluster management node.</p>
<h5 id="Waiting_for_first_event_from_ndbcluster">Waiting for first event from ndbcluster</h5><h5 id="Waiting_for_ndbcluster_binlog_update_to_reach_current_position">Waiting for ndbcluster binlog update to reach current position</h5><h5 id="Waiting_for_ndbcluster_to_start">Waiting for ndbcluster to start</h5><h5 id="Waiting_for_schema_epoch">Waiting for schema epoch</h5><p>The thread is waiting for a schema epoch (that is, a global checkpoint).</p>
<h5 id="Waiting_for_allowed_to_take_ndbcluster_global_schema_lock">Waiting for allowed to take ndbcluster global schema lock</h5><p>The thread is waiting for permission to take a global schema lock.</p>
<h5 id="Waiting_for_ndbcluster_global_schema_lock">Waiting for ndbcluster global schema lock</h5><p>The thread is waiting for a global schema lock held by another thread to be released.</p>
<h2 id="Event_Scheduler_Thread">Event Scheduler Thread</h2><p>These states occur for the Event Scheduler thread, threads that are created to execute scheduled events, or threads that terminate the scheduler.  </p>
<h5 id="Clearing">Clearing</h5><p>The scheduler thread or a thread that was executing an event is terminating and is about to end.</p>
<h5 id="Initialized">Initialized</h5><p>The scheduler thread or a thread that will execute an event has been initialized.</p>
<h5 id="Waiting_for_next_activation">Waiting for next activation</h5><p>The scheduler has a nonempty event queue but the next activation is in the future.</p>
<h5 id="Waiting_for_scheduler_to_stop">Waiting for scheduler to stop</h5><p>The thread issued SET GLOBAL event_scheduler=OFF and is waiting for the scheduler to stop.</p>
<h5 id="Waiting_on_empty_queue">Waiting on empty queue</h5><p>The scheduler’s event queue is empty and it is sleeping.</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;MySQL官方文档中的status存在于好几个小节中，每个status的英文解释其实一般是可以看的懂的，主要是寻找相应的status有点困难，所以我将所有的status整理在一个页面，直接Ctrl+F就可以查找到相应的status啦。&lt;br&gt;
    
    </summary>
    
      <category term="MySQL" scheme="https://wing324.github.io/categories/MySQL/"/>
    
    
      <category term="show profile" scheme="https://wing324.github.io/tags/show-profile/"/>
    
      <category term="show processlist" scheme="https://wing324.github.io/tags/show-processlist/"/>
    
      <category term="status" scheme="https://wing324.github.io/tags/status/"/>
    
  </entry>
  
  <entry>
    <title>Linux的账号管理</title>
    <link href="https://wing324.github.io/2018/04/02/Linux%E7%9A%84%E8%B4%A6%E5%8F%B7%E7%AE%A1%E7%90%86/"/>
    <id>https://wing324.github.io/2018/04/02/Linux的账号管理/</id>
    <published>2018-04-03T03:24:58.388Z</published>
    <updated>2017-01-31T10:35:59.000Z</updated>
    
    <content type="html"><![CDATA[<p>记忆力不好，对于Linux最基本的账号管理都记不住，只能默默的写下来，此处列出常用的让自己记住。。。<br><a id="more"></a></p>
<h2 id="查看用户相关信息">查看用户相关信息</h2><ul>
<li>/etc/passwd查看用户，/etc/shadow查看密码，/etc/group查看组</li>
<li>id命令查看自己或他人相关的UID/GID信息<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line"># id命令看起来有点像这样</div><div class="line">[test@localhost ~]$ id test1</div><div class="line">uid=1001(test1) gid=1001(test1) 组=1001(test1)</div><div class="line">[test@localhost ~]$ id test</div><div class="line">uid=1000(test) gid=1000(test) 组=1000(test)</div><div class="line">[test@localhost ~]$ id root</div><div class="line">uid=0(root) gid=0(root) 组=0(root)</div><div class="line"># 可以直接通过id查看当前用户的UID/GID</div><div class="line">[test@localhost ~]$ id</div><div class="line">uid=1000(test) gid=1000(test) 组=1000(test) 环境=unconfined_u:unconfined_r:unconfined_t:s0-s0:c0.c1023</div></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="新增用户">新增用户</h2><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line"># 只添加用户</div><div class="line">useradd test1</div><div class="line"></div><div class="line"># -g表示初始化的组，-G表示还可以加入的组</div><div class="line">[root@localhost ~]# useradd test2 -g test -G test2</div><div class="line"></div><div class="line"># useradd添加的账户是没有密码的，所以我们需要用passwd命令，修改账户密码</div><div class="line">[root@localhost ~]# passwd test2		</div><div class="line">更改用户 test2 的密码 。</div><div class="line">新的 密码：</div><div class="line">无效的密码： 密码少于 8 个字符</div><div class="line">重新输入新的 密码：</div><div class="line">passwd：所有的身份验证令牌已经成功更新。</div></pre></td></tr></table></figure>
<h2 id="修改用户">修改用户</h2><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line"># 为账户test2修改注释，接着可在/etc/passwd文件中查看相应的修改</div><div class="line">[root@localhost ~]# usermod -c &apos;just test&apos; test2</div><div class="line">该语句执行前：test2:x:1002:1000::/home/test2:/bin/bash</div><div class="line">该语句执行后：test2:x:1002:1000:just test:/home/test2:/bin/bash</div><div class="line"></div><div class="line"># 修改账户test2的初始化组，此处test1组的GID为1001</div><div class="line">[root@localhost ~]# usermod -g test1 test2</div><div class="line">该语句执行前：test2:x:1002:1000:just test:/home/test2:/bin/bash</div><div class="line">该语句执行后：test2:x:1002:1001:just test:/home/test2:/bin/bash</div><div class="line"></div><div class="line"># 修改账户test2的次要组</div><div class="line">[root@localhost ~]# usermod -G test test2</div></pre></td></tr></table></figure>
<h2 id="删除用户">删除用户</h2><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line"># 仅删除test2用户</div><div class="line">[root@localhost ~]# userdel test2</div><div class="line"></div><div class="line"># 删除test2用户及其home</div><div class="line">[root@localhost ~]# userdel -r test2</div></pre></td></tr></table></figure>
<p>使用userdel需要谨慎，因为也许可能你存在文件的user是test2用户创建的，如果删除test2用户，用户名就会变成一串数字。  </p>
<h2 id="新增用户组">新增用户组</h2><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line"># 只添加用户组</div><div class="line">[root@localhost ~]# groupadd group1</div><div class="line"></div><div class="line"># 创建用户组时，指定GID</div><div class="line">[root@localhost ~]# groupadd -g 324 group2</div></pre></td></tr></table></figure>
<h2 id="修改用户组">修改用户组</h2><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line"># 更改用户组的GID </div><div class="line">[root@localhost ~]# groupmod -g 125 group2</div></pre></td></tr></table></figure>
<h2 id="删除用户组">删除用户组</h2><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line"># 删除用户组</div><div class="line">[root@localhost ~]# groupdel group2</div><div class="line"></div><div class="line"># 为什么这个用户组删除不了呢</div><div class="line">[root@localhost ~]# groupdel test1</div><div class="line">groupdel：不能移除用户“test1”的主组</div><div class="line"># 该用户组删除不了的原因为，它为某个账号的初始化组即initial group,所以此时删除不了，此时可将该账号的GID修改为其他或者删除该账号</div><div class="line">[root@localhost ~]# groupdel test1</div><div class="line">groupdel：不能移除用户“test1”的主组</div><div class="line">[root@localhost ~]# usermod -g 1000 test1</div><div class="line">[root@localhost ~]# groupdel test1</div></pre></td></tr></table></figure>
<h2 id="组管理员">组管理员</h2><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line"># 建立群组</div><div class="line">[root@localhost ~]# groupadd testgroup</div><div class="line"># 为该群组添加密码</div><div class="line">[root@localhost ~]# gpasswd testgroup</div><div class="line">正在修改 testgroup 组的密码</div><div class="line">新密码：</div><div class="line">请重新输入新密码：</div><div class="line"># 将test设为testgroup的组管理员</div><div class="line">[root@localhost ~]# gpasswd -A test testgroup</div><div class="line"></div><div class="line">#以test登陆，将自己和test2加入到testgroup群组中</div><div class="line">[test@localhost ~]$ gpasswd -a test testgroup</div><div class="line">正在将用户“test”加入到“testgroup”组中</div><div class="line">[test@localhost ~]$ gpasswd -a test2 testgroup</div><div class="line">正在将用户“test2”加入到“testgroup”组中</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;记忆力不好，对于Linux最基本的账号管理都记不住，只能默默的写下来，此处列出常用的让自己记住。。。&lt;br&gt;
    
    </summary>
    
      <category term="Linux" scheme="https://wing324.github.io/categories/Linux/"/>
    
    
      <category term="user" scheme="https://wing324.github.io/tags/user/"/>
    
      <category term="group" scheme="https://wing324.github.io/tags/group/"/>
    
  </entry>
  
  <entry>
    <title>Java之final关键字</title>
    <link href="https://wing324.github.io/2017/10/31/Java%E4%B9%8Bfinal%E5%85%B3%E9%94%AE%E5%AD%97/"/>
    <id>https://wing324.github.io/2017/10/31/Java之final关键字/</id>
    <published>2017-10-31T17:30:04.000Z</published>
    <updated>2017-10-31T02:31:21.000Z</updated>
    
    <content type="html"><![CDATA[<p>还记得前面的static关键字吗？这次我们说说final关键字。</p>
<a id="more"></a>
<p>参考：<a href="https://ke.qq.com/webcourse/index.html#course_id=147646&amp;term_id=100167776&amp;taid=747444568735934&amp;vid=r1411l01p38" target="_blank" rel="external">腾讯课堂 </a></p>
<h5 id="一、为什么使用final关键字">一、为什么使用final关键字</h5><p>继承关系中最大的弊端是破坏了封装：子类可以访问父类的实现细节，而且可以通过方法覆盖的形式修改方法的实现细节。那么final就用来让你不可以做任何的更改，只能调用，不允许修改。  </p>
<p>final可以修饰非抽象类/非抽象方法/变量。  </p>
<p><strong>注意：</strong>构造方法不能使用final修饰，因为构造方法不能被继承，它是最终的一个状态。  </p>
<h5 id="二、关于final">二、关于final</h5><ul>
<li><p>final修饰的非抽象类<br>final修饰的非抽象类是不能被子类继承的。  </p>
<figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="keyword">package</span> com.wing.finaldemo;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FinalDemo</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">Superclass</span></span>&#123;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Subclass</span> <span class="keyword">extends</span> <span class="title">Superclass</span></span>&#123;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//此时会出现如下的报错</span></div><div class="line">Cannot inherit from <span class="keyword">final</span> <span class="string">'com.wing.finaldemo.Superclass'</span></div><div class="line">即com.wing.finaldemo.Superclass使用了<span class="keyword">final</span>修饰符，导致子类无法继承。</div></pre></td></tr></table></figure>
<p><strong>哪些类需要使用final来修饰呢？</strong>  </p>
<ul>
<li>该类不是专门为继承而设计的  </li>
<li>处于安全考虑，类的实现细节不许改动，不准修改源代码  </li>
<li>确保该类不会在被拓展。  </li>
</ul>
</li>
<li><p>final修饰的非抽象方法<br>final修饰的非抽象方法被称为最终的类，该方法不能被子类修改。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="keyword">package</span> com.wing.finaldemo;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FinalDemo</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</div><div class="line"></div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Superclass</span></span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">doWork</span><span class="params">()</span></span>&#123;</div><div class="line">        System.out.println(<span class="string">"SuperClass doWork"</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Subclass</span> <span class="keyword">extends</span> <span class="title">Superclass</span></span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doWork</span><span class="params">()</span></span>&#123;</div><div class="line">        System.out.println(<span class="string">"SubClass doWork"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//此时会出现以下错误</span></div><div class="line">Error:(<span class="number">17</span>, <span class="number">17</span>) java: com.wing.finaldemo.<span class="function">Subclass cannot override  <span class="title">doWork</span><span class="params">()</span> in com.wing.finaldemo.Superclass <span class="title">doWork</span><span class="params">()</span>,overriden method is <span class="keyword">final</span>.</span></div></pre></td></tr></table></figure>
<p><strong>哪些方法需要使用final修饰呢？</strong>  </p>
<ul>
<li>在父类中提供的统一的方法不准子类通过Override来修改，只允许子类调用，不允许子类修改。  </li>
<li>在构造器中调用的方法(初始化方法)，初始化方法一般为final修饰。  </li>
</ul>
</li>
<li><p>final修饰的变量<br>final修饰的变量被称为常量，该变量只能赋值一次，不能再次被赋值。<br><strong>final是唯一可以修改局部变量的修饰符。</strong><br>final修饰基本类型变量：表示该变量的值不能改变，即不能用”=”赋值;<br>final修饰引用类型变量：表示该引用变量的引用地址不能改变，而不是引用地址里面的内容不能变。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="comment">// 修改final修饰引用类型变量对应的引用地址的内容</span></div><div class="line"><span class="keyword">package</span> com.wing.finaldemo;</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FinalDemo</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</div><div class="line">        <span class="keyword">final</span> Person p1 = <span class="keyword">new</span> Person();</div><div class="line">        System.out.println(p1.info);</div><div class="line">        p1.info = <span class="string">"Second Vlaue"</span>;</div><div class="line">        System.out.println(p1.info);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>&#123;</div><div class="line">    <span class="keyword">public</span> String info=<span class="string">"First value"</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//此时输出</span></div><div class="line">First value</div><div class="line">Second Vlaue</div><div class="line"><span class="comment">// 可见：final修饰引用变量时，其引用地址里面的内容可以改变。</span></div><div class="line"></div><div class="line"><span class="comment">//修改final修饰引用类型变量对应的引用地址改变</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FinalDemo</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</div><div class="line">        <span class="keyword">final</span> Person p1 = <span class="keyword">new</span> Person();</div><div class="line">        System.out.println(p1.info);</div><div class="line">        p1.info = <span class="string">"Second Vlaue"</span>;</div><div class="line">        System.out.println(p1.info);</div><div class="line">        p1 = <span class="keyword">new</span> Person();</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>&#123;</div><div class="line">    <span class="keyword">public</span> String info=<span class="string">"First value"</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 此时编译报错</span></div><div class="line">Cannot assign a value to <span class="keyword">final</span> variable <span class="string">'p1'</span></div></pre></td></tr></table></figure>
<p><strong>哪些变量需要使用final修饰呢？</strong><br>当在程序中多个地方使用一个不变的变量，就将其定义为常量。</p>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;还记得前面的static关键字吗？这次我们说说final关键字。&lt;/p&gt;
    
    </summary>
    
      <category term="Java" scheme="https://wing324.github.io/categories/Java/"/>
    
    
      <category term="final" scheme="https://wing324.github.io/tags/final/"/>
    
  </entry>
  
  <entry>
    <title>Java之多态方法中的调用问题</title>
    <link href="https://wing324.github.io/2017/10/31/Java%E4%B9%8B%E5%A4%9A%E6%80%81%E6%96%B9%E6%B3%95%E4%B8%AD%E7%9A%84%E8%B0%83%E7%94%A8%E9%97%AE%E9%A2%98/"/>
    <id>https://wing324.github.io/2017/10/31/Java之多态方法中的调用问题/</id>
    <published>2017-10-31T17:25:07.000Z</published>
    <updated>2017-10-31T02:27:44.000Z</updated>
    
    <content type="html"><![CDATA[<p>Java的多态。嗯。是个很有意思的东西。</p>
<a id="more"></a>
<p>参考：<a href="https://ke.qq.com/webcourse/index.html#course_id=147646&amp;term_id=100167776&amp;taid=747414503964862&amp;vid=n1411d4d7v9" target="_blank" rel="external">腾讯课堂</a></p>
<p>多态方法调用情况存在四类，以doWork()方法为例：</p>
<ol>
<li><p>doWork()存在子类中，不存在父类中，结果调用子类的doWork()；</p>
<figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="keyword">package</span> com.wing.multidemo;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MultiDemo2</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</div><div class="line">        SuperClass s1 = <span class="keyword">new</span> SubClass();</div><div class="line">        s1.doWork();</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 父类</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">SuperClass</span></span>&#123;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 子类</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">SubClass</span> <span class="keyword">extends</span> <span class="title">SuperClass</span></span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doWork</span><span class="params">()</span></span>&#123;</div><div class="line">        System.out.println(<span class="string">"SubClass doWork"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//此时输出结果</span></div><div class="line">编译报错。</div><div class="line">因为编译时期需要去编译类型(Superclass)中找是否有doWork()方法，找到则编译通过，找不到则编译失败。</div></pre></td></tr></table></figure>
</li>
<li><p>dowork()不存在子类中，存在父类中，结果调用父类的doWork()；</p>
<figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="keyword">package</span> com.wing.multidemo;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MultiDemo2</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</div><div class="line">        SuperClass s1 = <span class="keyword">new</span> SubClass();</div><div class="line">        s1.doWork();</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 父类</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">SuperClass</span></span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doWork</span><span class="params">()</span></span>&#123;</div><div class="line">        System.out.println(<span class="string">"SuperClass doWork"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 子类</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">SubClass</span> <span class="keyword">extends</span> <span class="title">SuperClass</span></span>&#123;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 此时输出结果</span></div><div class="line">SuperClass doWork</div></pre></td></tr></table></figure>
</li>
<li><p>doWork()存在子类中，存在父类中，结果调用子类的doWork()；[就近原则]</p>
<figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="keyword">package</span> com.wing.multidemo;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MultiDemo2</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</div><div class="line">        SuperClass s1 = <span class="keyword">new</span> SubClass();</div><div class="line">        s1.doWork();</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 父类</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">SuperClass</span></span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doWork</span><span class="params">()</span></span>&#123;</div><div class="line">        System.out.println(<span class="string">"SuperClass doWork"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 子类</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">SubClass</span> <span class="keyword">extends</span> <span class="title">SuperClass</span></span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doWork</span><span class="params">()</span></span>&#123;</div><div class="line">        System.out.println(<span class="string">"SubClass doWork"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 此时输出结果</span></div><div class="line">SubClass doWork</div><div class="line">此时是先从SubClass中找是否存在doWork()方法，再去SuperClass中找是否存在doWork()方法。</div></pre></td></tr></table></figure>
</li>
<li><p>doWork()存在子类中(static方法)，存在父类中(方法)，结果调用子类的doWork()。[就近原则]<br>注意，这种方式称之为”隐藏”，而不是”方法覆盖”。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="keyword">package</span> com.wing.multidemo;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MultiDemo2</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</div><div class="line">        SuperClass s1 = <span class="keyword">new</span> SubClass();</div><div class="line">        s1.doWork();</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 父类</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">SuperClass</span></span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">doWork</span><span class="params">()</span></span>&#123;</div><div class="line">        System.out.println(<span class="string">"SuperClass doWork"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 子类</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">SubClass</span> <span class="keyword">extends</span> <span class="title">SuperClass</span></span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">doWork</span><span class="params">()</span></span>&#123;</div><div class="line">        System.out.println(<span class="string">"SubClass doWork"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 此时输出结果</span></div><div class="line">SuperClass doWork</div><div class="line">解释：静态方法的调用，只需要类即可。如果使用对象来调用方法，其实使用对象的类(该代码中为SuperClass)调用静态方法。</div></pre></td></tr></table></figure>
</li>
</ol>
<p><strong>总结:</strong></p>
<ol>
<li>多态调用方法时，首先方法会去子类中查找方法是否存在，再去父类中查找方法是否存在[方法必须存在父类中，否则多态编译将会失败。]</li>
<li>多态中静态方法的”重写”不叫重写，应该叫”方法隐藏”，为什么呢？因为静态方法的调用，只需要类即可，如果使用对象来调用静态方法，其实使用的是对象的类来调用静态方法的。</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Java的多态。嗯。是个很有意思的东西。&lt;/p&gt;
    
    </summary>
    
      <category term="Java" scheme="https://wing324.github.io/categories/Java/"/>
    
    
      <category term="polymorphism" scheme="https://wing324.github.io/tags/polymorphism/"/>
    
  </entry>
  
</feed>
